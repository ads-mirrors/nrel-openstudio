
// Generated from modelica.g4 by ANTLR 4.13.2


#include "modelicaListener.h"
#include "modelicaVisitor.h"

#include "modelicaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ModelicaParserStaticData final {
  ModelicaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ModelicaParserStaticData(const ModelicaParserStaticData&) = delete;
  ModelicaParserStaticData(ModelicaParserStaticData&&) = delete;
  ModelicaParserStaticData& operator=(const ModelicaParserStaticData&) = delete;
  ModelicaParserStaticData& operator=(ModelicaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag modelicaParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<ModelicaParserStaticData> modelicaParserStaticData = nullptr;

void modelicaParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (modelicaParserStaticData != nullptr) {
    return;
  }
#else
  assert(modelicaParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<ModelicaParserStaticData>(
    std::vector<std::string>{
      "stored_definition", "within_statement", "class_definition", "class_specifier", 
      "class_prefixes", "long_class_specifier", "short_class_specifier", 
      "der_class_specifier", "base_prefix", "enum_list", "enumeration_literal", 
      "composition", "language_specification", "external_function_call", 
      "element_list", "element", "import_clause", "import_list", "extends_clause", 
      "constraining_clause", "component_clause", "type_prefix", "type_specifier", 
      "component_list", "component_declaration", "condition_attribute", 
      "declaration", "modification", "class_modification", "argument_list", 
      "argument", "element_modification_or_replaceable", "element_modification", 
      "element_redeclaration", "element_replaceable", "component_clause1", 
      "component_declaration1", "short_class_definition", "equation_section", 
      "algorithm_section", "equation", "statement", "if_equation", "if_statement", 
      "for_equation", "for_statement", "for_indices", "for_index", "while_statement", 
      "when_equation", "when_statement", "connect_clause", "expression", 
      "simple_expression", "logical_expression", "logical_term", "logical_factor", 
      "relation", "rel_op", "arithmetic_expression", "add_op", "term", "mul_op", 
      "factor", "primary", "name", "component_reference", "function_call_args", 
      "function_arguments", "named_arguments", "named_argument", "function_argument", 
      "output_expression_list", "expression_list", "array_subscripts", "subscript", 
      "comment", "string_comment", "model_annotation", "annotation"
    },
    std::vector<std::string>{
      "", "'final'", "';'", "'within'", "'encapsulated'", "'partial'", "'class'", 
      "'model'", "'operator'", "'record'", "'block'", "'expandable'", "'connector'", 
      "'type'", "'package'", "'pure'", "'impure'", "'function'", "'end'", 
      "'extends'", "'='", "'enumeration'", "'('", "':'", "')'", "'der'", 
      "','", "'public'", "'protected'", "'external'", "'redeclare'", "'inner'", 
      "'outer'", "'replaceable'", "'import'", "'.*'", "'.{'", "'}'", "'constrainedby'", 
      "'flow'", "'stream'", "'discrete'", "'parameter'", "'constant'", "'input'", 
      "'output'", "'if'", "':='", "'each'", "'initial'", "'equation'", "'algorithm'", 
      "'break'", "'return'", "'then'", "'elseif'", "'else'", "'for'", "'loop'", 
      "'in'", "'while'", "'when'", "'elsewhen'", "'connect'", "'or'", "'and'", 
      "'not'", "'<'", "'<='", "'>'", "'>='", "'=='", "'<>'", "'+'", "'-'", 
      "'.+'", "'.-'", "'*'", "'/'", "'./'", "'^'", "'.^'", "'false'", "'true'", 
      "'['", "']'", "'{'", "'.'", "'annotation'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "IDENT", "STRING", "UNSIGNED_NUMBER", "WS", "COMMENT", 
      "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,94,1028,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,0,3,0,168,
  	8,0,1,0,1,0,1,0,5,0,173,8,0,10,0,12,0,176,9,0,1,1,1,1,3,1,180,8,1,1,1,
  	1,1,1,2,3,2,185,8,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,193,8,3,1,4,3,4,196,8,
  	4,1,4,1,4,1,4,3,4,201,8,4,1,4,1,4,1,4,3,4,206,8,4,1,4,1,4,1,4,1,4,3,4,
  	212,8,4,1,4,3,4,215,8,4,1,4,1,4,3,4,219,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,3,5,230,8,5,1,5,1,5,1,5,1,5,1,5,3,5,237,8,5,1,6,1,6,1,6,1,6,
  	1,6,3,6,244,8,6,1,6,3,6,247,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,256,8,
  	6,1,6,3,6,259,8,6,1,6,1,6,3,6,263,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,5,7,274,8,7,10,7,12,7,277,9,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,5,9,
  	287,8,9,10,9,12,9,290,9,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,5,11,302,8,11,10,11,12,11,305,9,11,1,11,1,11,3,11,309,8,11,1,11,
  	3,11,312,8,11,1,11,3,11,315,8,11,1,11,3,11,318,8,11,1,11,1,11,1,11,3,
  	11,323,8,11,1,12,1,12,1,13,1,13,1,13,3,13,330,8,13,1,13,1,13,1,13,3,13,
  	335,8,13,1,13,1,13,1,14,5,14,340,8,14,10,14,12,14,343,9,14,1,15,1,15,
  	1,15,3,15,348,8,15,1,15,3,15,351,8,15,1,15,3,15,354,8,15,1,15,3,15,357,
  	8,15,1,15,1,15,3,15,361,8,15,1,15,1,15,1,15,3,15,366,8,15,1,15,1,15,1,
  	15,3,15,371,8,15,3,15,373,8,15,3,15,375,8,15,1,15,1,15,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,392,8,16,1,16,
  	1,16,1,17,1,17,1,17,5,17,399,8,17,10,17,12,17,402,9,17,1,18,1,18,1,18,
  	3,18,407,8,18,1,18,3,18,410,8,18,1,19,1,19,1,19,3,19,415,8,19,1,20,1,
  	20,1,20,3,20,420,8,20,1,20,1,20,1,21,3,21,425,8,21,1,21,3,21,428,8,21,
  	1,21,3,21,431,8,21,1,22,1,22,1,23,1,23,1,23,5,23,438,8,23,10,23,12,23,
  	441,9,23,1,24,1,24,3,24,445,8,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,
  	26,454,8,26,1,26,3,26,457,8,26,1,27,1,27,1,27,3,27,462,8,27,1,27,1,27,
  	1,27,1,27,3,27,468,8,27,1,28,1,28,3,28,472,8,28,1,28,1,28,1,29,1,29,1,
  	29,5,29,479,8,29,10,29,12,29,482,9,29,1,30,1,30,3,30,486,8,30,1,31,3,
  	31,489,8,31,1,31,3,31,492,8,31,1,31,1,31,3,31,496,8,31,1,32,1,32,3,32,
  	500,8,32,1,32,1,32,1,33,1,33,3,33,506,8,33,1,33,3,33,509,8,33,1,33,1,
  	33,3,33,513,8,33,1,33,3,33,516,8,33,1,34,1,34,1,34,3,34,521,8,34,1,34,
  	3,34,524,8,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,
  	3,38,537,8,38,1,38,1,38,5,38,541,8,38,10,38,12,38,544,9,38,1,39,3,39,
  	547,8,39,1,39,1,39,1,39,1,39,5,39,553,8,39,10,39,12,39,556,9,39,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,569,8,40,1,40,
  	1,40,1,40,1,41,1,41,1,41,1,41,3,41,578,8,41,1,41,1,41,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,593,8,41,1,41,1,41,1,42,
  	1,42,1,42,1,42,5,42,601,8,42,10,42,12,42,604,9,42,1,42,1,42,1,42,1,42,
  	5,42,610,8,42,10,42,12,42,613,9,42,5,42,615,8,42,10,42,12,42,618,9,42,
  	1,42,1,42,5,42,622,8,42,10,42,12,42,625,9,42,3,42,627,8,42,1,42,1,42,
  	1,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,638,8,43,10,43,12,43,641,9,43,
  	1,43,1,43,1,43,1,43,1,43,1,43,5,43,649,8,43,10,43,12,43,652,9,43,5,43,
  	654,8,43,10,43,12,43,657,9,43,1,43,1,43,1,43,1,43,5,43,663,8,43,10,43,
  	12,43,666,9,43,3,43,668,8,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,
  	677,8,44,10,44,12,44,680,9,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,
  	1,45,5,45,691,8,45,10,45,12,45,694,9,45,1,45,1,45,1,45,1,46,1,46,1,46,
  	5,46,702,8,46,10,46,12,46,705,9,46,1,47,1,47,1,47,3,47,710,8,47,1,48,
  	1,48,1,48,1,48,1,48,1,48,5,48,718,8,48,10,48,12,48,721,9,48,1,48,1,48,
  	1,48,1,49,1,49,1,49,1,49,5,49,730,8,49,10,49,12,49,733,9,49,1,49,1,49,
  	1,49,1,49,5,49,739,8,49,10,49,12,49,742,9,49,5,49,744,8,49,10,49,12,49,
  	747,9,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,5,50,758,8,50,10,
  	50,12,50,761,9,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,769,8,50,10,50,12,
  	50,772,9,50,5,50,774,8,50,10,50,12,50,777,9,50,1,50,1,50,1,50,1,51,1,
  	51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
  	52,1,52,5,52,799,8,52,10,52,12,52,802,9,52,1,52,1,52,1,52,3,52,807,8,
  	52,1,53,1,53,1,53,1,53,1,53,3,53,814,8,53,3,53,816,8,53,1,54,1,54,1,54,
  	5,54,821,8,54,10,54,12,54,824,9,54,1,55,1,55,1,55,5,55,829,8,55,10,55,
  	12,55,832,9,55,1,56,3,56,835,8,56,1,56,1,56,1,57,1,57,1,57,1,57,3,57,
  	843,8,57,1,58,1,58,1,59,3,59,848,8,59,1,59,1,59,1,59,1,59,5,59,854,8,
  	59,10,59,12,59,857,9,59,1,60,1,60,1,61,1,61,1,61,1,61,5,61,865,8,61,10,
  	61,12,61,868,9,61,1,62,1,62,1,63,1,63,1,63,3,63,875,8,63,1,64,1,64,1,
  	64,1,64,1,64,1,64,1,64,3,64,884,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
  	64,1,64,1,64,1,64,5,64,896,8,64,10,64,12,64,899,9,64,1,64,1,64,1,64,1,
  	64,1,64,1,64,1,64,3,64,908,8,64,1,65,3,65,911,8,65,1,65,1,65,1,65,5,65,
  	916,8,65,10,65,12,65,919,9,65,1,66,3,66,922,8,66,1,66,1,66,3,66,926,8,
  	66,1,66,1,66,1,66,3,66,931,8,66,5,66,933,8,66,10,66,12,66,936,9,66,1,
  	67,1,67,3,67,940,8,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,949,8,68,
  	1,68,3,68,952,8,68,1,69,1,69,1,69,3,69,957,8,69,1,70,1,70,1,70,1,70,1,
  	71,1,71,1,71,1,71,3,71,967,8,71,1,71,1,71,1,71,3,71,972,8,71,1,72,3,72,
  	975,8,72,1,72,1,72,3,72,979,8,72,5,72,981,8,72,10,72,12,72,984,9,72,1,
  	73,1,73,1,73,5,73,989,8,73,10,73,12,73,992,9,73,1,74,1,74,1,74,1,74,5,
  	74,998,8,74,10,74,12,74,1001,9,74,1,74,1,74,1,75,1,75,3,75,1007,8,75,
  	1,76,1,76,3,76,1011,8,76,1,77,1,77,1,77,5,77,1016,8,77,10,77,12,77,1019,
  	9,77,3,77,1021,8,77,1,78,1,78,1,79,1,79,1,79,1,79,0,0,80,0,2,4,6,8,10,
  	12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
  	58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
  	104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
  	140,142,144,146,148,150,152,154,156,158,0,8,1,0,15,16,1,0,39,40,1,0,41,
  	43,1,0,44,45,1,0,67,72,1,0,73,76,2,0,35,35,77,79,1,0,80,81,1113,0,163,
  	1,0,0,0,2,177,1,0,0,0,4,184,1,0,0,0,6,192,1,0,0,0,8,195,1,0,0,0,10,236,
  	1,0,0,0,12,262,1,0,0,0,14,264,1,0,0,0,16,281,1,0,0,0,18,283,1,0,0,0,20,
  	291,1,0,0,0,22,294,1,0,0,0,24,324,1,0,0,0,26,329,1,0,0,0,28,341,1,0,0,
  	0,30,374,1,0,0,0,32,378,1,0,0,0,34,395,1,0,0,0,36,403,1,0,0,0,38,411,
  	1,0,0,0,40,416,1,0,0,0,42,424,1,0,0,0,44,432,1,0,0,0,46,434,1,0,0,0,48,
  	442,1,0,0,0,50,448,1,0,0,0,52,451,1,0,0,0,54,467,1,0,0,0,56,469,1,0,0,
  	0,58,475,1,0,0,0,60,485,1,0,0,0,62,488,1,0,0,0,64,497,1,0,0,0,66,503,
  	1,0,0,0,68,517,1,0,0,0,70,525,1,0,0,0,72,529,1,0,0,0,74,532,1,0,0,0,76,
  	536,1,0,0,0,78,546,1,0,0,0,80,568,1,0,0,0,82,592,1,0,0,0,84,596,1,0,0,
  	0,86,631,1,0,0,0,88,672,1,0,0,0,90,684,1,0,0,0,92,698,1,0,0,0,94,706,
  	1,0,0,0,96,711,1,0,0,0,98,725,1,0,0,0,100,751,1,0,0,0,102,781,1,0,0,0,
  	104,806,1,0,0,0,106,808,1,0,0,0,108,817,1,0,0,0,110,825,1,0,0,0,112,834,
  	1,0,0,0,114,838,1,0,0,0,116,844,1,0,0,0,118,847,1,0,0,0,120,858,1,0,0,
  	0,122,860,1,0,0,0,124,869,1,0,0,0,126,871,1,0,0,0,128,907,1,0,0,0,130,
  	910,1,0,0,0,132,921,1,0,0,0,134,937,1,0,0,0,136,951,1,0,0,0,138,953,1,
  	0,0,0,140,958,1,0,0,0,142,971,1,0,0,0,144,974,1,0,0,0,146,985,1,0,0,0,
  	148,993,1,0,0,0,150,1006,1,0,0,0,152,1008,1,0,0,0,154,1020,1,0,0,0,156,
  	1022,1,0,0,0,158,1024,1,0,0,0,160,162,3,2,1,0,161,160,1,0,0,0,162,165,
  	1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,174,1,0,0,0,165,163,1,0,0,
  	0,166,168,5,1,0,0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,
  	170,3,4,2,0,170,171,5,2,0,0,171,173,1,0,0,0,172,167,1,0,0,0,173,176,1,
  	0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,1,1,0,0,0,176,174,1,0,0,0,177,
  	179,5,3,0,0,178,180,3,130,65,0,179,178,1,0,0,0,179,180,1,0,0,0,180,181,
  	1,0,0,0,181,182,5,2,0,0,182,3,1,0,0,0,183,185,5,4,0,0,184,183,1,0,0,0,
  	184,185,1,0,0,0,185,186,1,0,0,0,186,187,3,8,4,0,187,188,3,6,3,0,188,5,
  	1,0,0,0,189,193,3,10,5,0,190,193,3,12,6,0,191,193,3,14,7,0,192,189,1,
  	0,0,0,192,190,1,0,0,0,192,191,1,0,0,0,193,7,1,0,0,0,194,196,5,5,0,0,195,
  	194,1,0,0,0,195,196,1,0,0,0,196,218,1,0,0,0,197,219,5,6,0,0,198,219,5,
  	7,0,0,199,201,5,8,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,
  	202,219,5,9,0,0,203,219,5,10,0,0,204,206,5,11,0,0,205,204,1,0,0,0,205,
  	206,1,0,0,0,206,207,1,0,0,0,207,219,5,12,0,0,208,219,5,13,0,0,209,219,
  	5,14,0,0,210,212,7,0,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,214,1,0,
  	0,0,213,215,5,8,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,
  	219,5,17,0,0,217,219,5,8,0,0,218,197,1,0,0,0,218,198,1,0,0,0,218,200,
  	1,0,0,0,218,203,1,0,0,0,218,205,1,0,0,0,218,208,1,0,0,0,218,209,1,0,0,
  	0,218,211,1,0,0,0,218,217,1,0,0,0,219,9,1,0,0,0,220,221,5,89,0,0,221,
  	222,3,154,77,0,222,223,3,22,11,0,223,224,5,18,0,0,224,225,5,89,0,0,225,
  	237,1,0,0,0,226,227,5,19,0,0,227,229,5,89,0,0,228,230,3,56,28,0,229,228,
  	1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,3,154,77,0,232,233,3,
  	22,11,0,233,234,5,18,0,0,234,235,5,89,0,0,235,237,1,0,0,0,236,220,1,0,
  	0,0,236,226,1,0,0,0,237,11,1,0,0,0,238,239,5,89,0,0,239,240,5,20,0,0,
  	240,241,3,16,8,0,241,243,3,130,65,0,242,244,3,148,74,0,243,242,1,0,0,
  	0,243,244,1,0,0,0,244,246,1,0,0,0,245,247,3,56,28,0,246,245,1,0,0,0,246,
  	247,1,0,0,0,247,248,1,0,0,0,248,249,3,152,76,0,249,263,1,0,0,0,250,251,
  	5,89,0,0,251,252,5,20,0,0,252,253,5,21,0,0,253,258,5,22,0,0,254,256,3,
  	18,9,0,255,254,1,0,0,0,255,256,1,0,0,0,256,259,1,0,0,0,257,259,5,23,0,
  	0,258,255,1,0,0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,261,5,24,0,0,261,
  	263,3,152,76,0,262,238,1,0,0,0,262,250,1,0,0,0,263,13,1,0,0,0,264,265,
  	5,89,0,0,265,266,5,20,0,0,266,267,5,25,0,0,267,268,5,22,0,0,268,269,3,
  	130,65,0,269,270,5,26,0,0,270,275,5,89,0,0,271,272,5,26,0,0,272,274,5,
  	89,0,0,273,271,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,
  	0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,5,24,0,0,279,280,3,152,76,0,
  	280,15,1,0,0,0,281,282,3,42,21,0,282,17,1,0,0,0,283,288,3,20,10,0,284,
  	285,5,26,0,0,285,287,3,20,10,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,
  	1,0,0,0,288,289,1,0,0,0,289,19,1,0,0,0,290,288,1,0,0,0,291,292,5,89,0,
  	0,292,293,3,152,76,0,293,21,1,0,0,0,294,303,3,28,14,0,295,296,5,27,0,
  	0,296,302,3,28,14,0,297,298,5,28,0,0,298,302,3,28,14,0,299,302,3,76,38,
  	0,300,302,3,78,39,0,301,295,1,0,0,0,301,297,1,0,0,0,301,299,1,0,0,0,301,
  	300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,317,1,
  	0,0,0,305,303,1,0,0,0,306,308,5,29,0,0,307,309,3,24,12,0,308,307,1,0,
  	0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,312,3,26,13,0,311,310,1,0,0,0,
  	311,312,1,0,0,0,312,314,1,0,0,0,313,315,3,158,79,0,314,313,1,0,0,0,314,
  	315,1,0,0,0,315,316,1,0,0,0,316,318,5,2,0,0,317,306,1,0,0,0,317,318,1,
  	0,0,0,318,322,1,0,0,0,319,320,3,156,78,0,320,321,5,2,0,0,321,323,1,0,
  	0,0,322,319,1,0,0,0,322,323,1,0,0,0,323,23,1,0,0,0,324,325,5,90,0,0,325,
  	25,1,0,0,0,326,327,3,132,66,0,327,328,5,20,0,0,328,330,1,0,0,0,329,326,
  	1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,5,89,0,0,332,334,5,22,
  	0,0,333,335,3,146,73,0,334,333,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,
  	0,336,337,5,24,0,0,337,27,1,0,0,0,338,340,3,30,15,0,339,338,1,0,0,0,340,
  	343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,29,1,0,0,0,343,341,1,
  	0,0,0,344,375,3,32,16,0,345,375,3,36,18,0,346,348,5,30,0,0,347,346,1,
  	0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,351,5,1,0,0,350,349,1,0,0,0,
  	350,351,1,0,0,0,351,353,1,0,0,0,352,354,5,31,0,0,353,352,1,0,0,0,353,
  	354,1,0,0,0,354,356,1,0,0,0,355,357,5,32,0,0,356,355,1,0,0,0,356,357,
  	1,0,0,0,357,372,1,0,0,0,358,361,3,4,2,0,359,361,3,40,20,0,360,358,1,0,
  	0,0,360,359,1,0,0,0,361,373,1,0,0,0,362,365,5,33,0,0,363,366,3,4,2,0,
  	364,366,3,40,20,0,365,363,1,0,0,0,365,364,1,0,0,0,366,370,1,0,0,0,367,
  	368,3,38,19,0,368,369,3,152,76,0,369,371,1,0,0,0,370,367,1,0,0,0,370,
  	371,1,0,0,0,371,373,1,0,0,0,372,360,1,0,0,0,372,362,1,0,0,0,373,375,1,
  	0,0,0,374,344,1,0,0,0,374,345,1,0,0,0,374,347,1,0,0,0,375,376,1,0,0,0,
  	376,377,5,2,0,0,377,31,1,0,0,0,378,391,5,34,0,0,379,380,5,89,0,0,380,
  	381,5,20,0,0,381,392,3,130,65,0,382,383,3,130,65,0,383,384,5,35,0,0,384,
  	392,1,0,0,0,385,386,3,130,65,0,386,387,5,36,0,0,387,388,3,34,17,0,388,
  	389,5,37,0,0,389,392,1,0,0,0,390,392,3,130,65,0,391,379,1,0,0,0,391,382,
  	1,0,0,0,391,385,1,0,0,0,391,390,1,0,0,0,392,393,1,0,0,0,393,394,3,152,
  	76,0,394,33,1,0,0,0,395,400,5,89,0,0,396,397,5,26,0,0,397,399,5,89,0,
  	0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,
  	35,1,0,0,0,402,400,1,0,0,0,403,404,5,19,0,0,404,406,3,130,65,0,405,407,
  	3,56,28,0,406,405,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,410,3,158,
  	79,0,409,408,1,0,0,0,409,410,1,0,0,0,410,37,1,0,0,0,411,412,5,38,0,0,
  	412,414,3,130,65,0,413,415,3,56,28,0,414,413,1,0,0,0,414,415,1,0,0,0,
  	415,39,1,0,0,0,416,417,3,42,21,0,417,419,3,44,22,0,418,420,3,148,74,0,
  	419,418,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,3,46,23,0,422,
  	41,1,0,0,0,423,425,7,1,0,0,424,423,1,0,0,0,424,425,1,0,0,0,425,427,1,
  	0,0,0,426,428,7,2,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,
  	429,431,7,3,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,43,1,0,0,0,432,433,
  	3,130,65,0,433,45,1,0,0,0,434,439,3,48,24,0,435,436,5,26,0,0,436,438,
  	3,48,24,0,437,435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,
  	0,0,440,47,1,0,0,0,441,439,1,0,0,0,442,444,3,52,26,0,443,445,3,50,25,
  	0,444,443,1,0,0,0,444,445,1,0,0,0,445,446,1,0,0,0,446,447,3,152,76,0,
  	447,49,1,0,0,0,448,449,5,46,0,0,449,450,3,104,52,0,450,51,1,0,0,0,451,
  	453,5,89,0,0,452,454,3,148,74,0,453,452,1,0,0,0,453,454,1,0,0,0,454,456,
  	1,0,0,0,455,457,3,54,27,0,456,455,1,0,0,0,456,457,1,0,0,0,457,53,1,0,
  	0,0,458,461,3,56,28,0,459,460,5,20,0,0,460,462,3,104,52,0,461,459,1,0,
  	0,0,461,462,1,0,0,0,462,468,1,0,0,0,463,464,5,20,0,0,464,468,3,104,52,
  	0,465,466,5,47,0,0,466,468,3,104,52,0,467,458,1,0,0,0,467,463,1,0,0,0,
  	467,465,1,0,0,0,468,55,1,0,0,0,469,471,5,22,0,0,470,472,3,58,29,0,471,
  	470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,5,24,0,0,474,57,1,
  	0,0,0,475,480,3,60,30,0,476,477,5,26,0,0,477,479,3,60,30,0,478,476,1,
  	0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,59,1,0,0,0,
  	482,480,1,0,0,0,483,486,3,62,31,0,484,486,3,66,33,0,485,483,1,0,0,0,485,
  	484,1,0,0,0,486,61,1,0,0,0,487,489,5,48,0,0,488,487,1,0,0,0,488,489,1,
  	0,0,0,489,491,1,0,0,0,490,492,5,1,0,0,491,490,1,0,0,0,491,492,1,0,0,0,
  	492,495,1,0,0,0,493,496,3,64,32,0,494,496,3,68,34,0,495,493,1,0,0,0,495,
  	494,1,0,0,0,496,63,1,0,0,0,497,499,3,130,65,0,498,500,3,54,27,0,499,498,
  	1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,502,3,154,77,0,502,65,1,0,
  	0,0,503,505,5,30,0,0,504,506,5,48,0,0,505,504,1,0,0,0,505,506,1,0,0,0,
  	506,508,1,0,0,0,507,509,5,1,0,0,508,507,1,0,0,0,508,509,1,0,0,0,509,515,
  	1,0,0,0,510,513,3,74,37,0,511,513,3,70,35,0,512,510,1,0,0,0,512,511,1,
  	0,0,0,513,516,1,0,0,0,514,516,3,68,34,0,515,512,1,0,0,0,515,514,1,0,0,
  	0,516,67,1,0,0,0,517,520,5,33,0,0,518,521,3,74,37,0,519,521,3,70,35,0,
  	520,518,1,0,0,0,520,519,1,0,0,0,521,523,1,0,0,0,522,524,3,38,19,0,523,
  	522,1,0,0,0,523,524,1,0,0,0,524,69,1,0,0,0,525,526,3,42,21,0,526,527,
  	3,44,22,0,527,528,3,72,36,0,528,71,1,0,0,0,529,530,3,52,26,0,530,531,
  	3,152,76,0,531,73,1,0,0,0,532,533,3,8,4,0,533,534,3,12,6,0,534,75,1,0,
  	0,0,535,537,5,49,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,
  	538,542,5,50,0,0,539,541,3,80,40,0,540,539,1,0,0,0,541,544,1,0,0,0,542,
  	540,1,0,0,0,542,543,1,0,0,0,543,77,1,0,0,0,544,542,1,0,0,0,545,547,5,
  	49,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,554,5,51,0,
  	0,549,550,3,82,41,0,550,551,5,2,0,0,551,553,1,0,0,0,552,549,1,0,0,0,553,
  	556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,79,1,0,0,0,556,554,1,
  	0,0,0,557,558,3,106,53,0,558,559,5,20,0,0,559,560,3,104,52,0,560,569,
  	1,0,0,0,561,569,3,84,42,0,562,569,3,88,44,0,563,569,3,102,51,0,564,569,
  	3,98,49,0,565,566,3,130,65,0,566,567,3,134,67,0,567,569,1,0,0,0,568,557,
  	1,0,0,0,568,561,1,0,0,0,568,562,1,0,0,0,568,563,1,0,0,0,568,564,1,0,0,
  	0,568,565,1,0,0,0,569,570,1,0,0,0,570,571,3,152,76,0,571,572,5,2,0,0,
  	572,81,1,0,0,0,573,577,3,132,66,0,574,575,5,47,0,0,575,578,3,104,52,0,
  	576,578,3,134,67,0,577,574,1,0,0,0,577,576,1,0,0,0,578,593,1,0,0,0,579,
  	580,5,22,0,0,580,581,3,144,72,0,581,582,5,24,0,0,582,583,5,47,0,0,583,
  	584,3,132,66,0,584,585,3,134,67,0,585,593,1,0,0,0,586,593,5,52,0,0,587,
  	593,5,53,0,0,588,593,3,86,43,0,589,593,3,90,45,0,590,593,3,96,48,0,591,
  	593,3,100,50,0,592,573,1,0,0,0,592,579,1,0,0,0,592,586,1,0,0,0,592,587,
  	1,0,0,0,592,588,1,0,0,0,592,589,1,0,0,0,592,590,1,0,0,0,592,591,1,0,0,
  	0,593,594,1,0,0,0,594,595,3,152,76,0,595,83,1,0,0,0,596,597,5,46,0,0,
  	597,598,3,104,52,0,598,602,5,54,0,0,599,601,3,80,40,0,600,599,1,0,0,0,
  	601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,616,1,0,0,0,604,602,
  	1,0,0,0,605,606,5,55,0,0,606,607,3,104,52,0,607,611,5,54,0,0,608,610,
  	3,80,40,0,609,608,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,
  	0,0,612,615,1,0,0,0,613,611,1,0,0,0,614,605,1,0,0,0,615,618,1,0,0,0,616,
  	614,1,0,0,0,616,617,1,0,0,0,617,626,1,0,0,0,618,616,1,0,0,0,619,623,5,
  	56,0,0,620,622,3,80,40,0,621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,
  	0,0,623,624,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,626,619,1,0,0,0,626,
  	627,1,0,0,0,627,628,1,0,0,0,628,629,5,18,0,0,629,630,5,46,0,0,630,85,
  	1,0,0,0,631,632,5,46,0,0,632,633,3,104,52,0,633,639,5,54,0,0,634,635,
  	3,82,41,0,635,636,5,2,0,0,636,638,1,0,0,0,637,634,1,0,0,0,638,641,1,0,
  	0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,655,1,0,0,0,641,639,1,0,0,0,642,
  	643,5,55,0,0,643,644,3,104,52,0,644,650,5,54,0,0,645,646,3,82,41,0,646,
  	647,5,2,0,0,647,649,1,0,0,0,648,645,1,0,0,0,649,652,1,0,0,0,650,648,1,
  	0,0,0,650,651,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,653,642,1,0,0,0,
  	654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,667,1,0,0,0,657,655,
  	1,0,0,0,658,664,5,56,0,0,659,660,3,82,41,0,660,661,5,2,0,0,661,663,1,
  	0,0,0,662,659,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,
  	665,668,1,0,0,0,666,664,1,0,0,0,667,658,1,0,0,0,667,668,1,0,0,0,668,669,
  	1,0,0,0,669,670,5,18,0,0,670,671,5,46,0,0,671,87,1,0,0,0,672,673,5,57,
  	0,0,673,674,3,92,46,0,674,678,5,58,0,0,675,677,3,80,40,0,676,675,1,0,
  	0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,
  	678,1,0,0,0,681,682,5,18,0,0,682,683,5,57,0,0,683,89,1,0,0,0,684,685,
  	5,57,0,0,685,686,3,92,46,0,686,692,5,58,0,0,687,688,3,82,41,0,688,689,
  	5,2,0,0,689,691,1,0,0,0,690,687,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,
  	0,692,693,1,0,0,0,693,695,1,0,0,0,694,692,1,0,0,0,695,696,5,18,0,0,696,
  	697,5,57,0,0,697,91,1,0,0,0,698,703,3,94,47,0,699,700,5,26,0,0,700,702,
  	3,94,47,0,701,699,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,
  	0,0,704,93,1,0,0,0,705,703,1,0,0,0,706,709,5,89,0,0,707,708,5,59,0,0,
  	708,710,3,104,52,0,709,707,1,0,0,0,709,710,1,0,0,0,710,95,1,0,0,0,711,
  	712,5,60,0,0,712,713,3,104,52,0,713,719,5,58,0,0,714,715,3,82,41,0,715,
  	716,5,2,0,0,716,718,1,0,0,0,717,714,1,0,0,0,718,721,1,0,0,0,719,717,1,
  	0,0,0,719,720,1,0,0,0,720,722,1,0,0,0,721,719,1,0,0,0,722,723,5,18,0,
  	0,723,724,5,60,0,0,724,97,1,0,0,0,725,726,5,61,0,0,726,727,3,104,52,0,
  	727,731,5,54,0,0,728,730,3,80,40,0,729,728,1,0,0,0,730,733,1,0,0,0,731,
  	729,1,0,0,0,731,732,1,0,0,0,732,745,1,0,0,0,733,731,1,0,0,0,734,735,5,
  	62,0,0,735,736,3,104,52,0,736,740,5,54,0,0,737,739,3,80,40,0,738,737,
  	1,0,0,0,739,742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,744,1,0,0,
  	0,742,740,1,0,0,0,743,734,1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,
  	746,1,0,0,0,746,748,1,0,0,0,747,745,1,0,0,0,748,749,5,18,0,0,749,750,
  	5,61,0,0,750,99,1,0,0,0,751,752,5,61,0,0,752,753,3,104,52,0,753,759,5,
  	54,0,0,754,755,3,82,41,0,755,756,5,2,0,0,756,758,1,0,0,0,757,754,1,0,
  	0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,775,1,0,0,0,761,
  	759,1,0,0,0,762,763,5,62,0,0,763,764,3,104,52,0,764,770,5,54,0,0,765,
  	766,3,82,41,0,766,767,5,2,0,0,767,769,1,0,0,0,768,765,1,0,0,0,769,772,
  	1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,
  	0,773,762,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,
  	778,1,0,0,0,777,775,1,0,0,0,778,779,5,18,0,0,779,780,5,61,0,0,780,101,
  	1,0,0,0,781,782,5,63,0,0,782,783,5,22,0,0,783,784,3,132,66,0,784,785,
  	5,26,0,0,785,786,3,132,66,0,786,787,5,24,0,0,787,103,1,0,0,0,788,807,
  	3,106,53,0,789,790,5,46,0,0,790,791,3,104,52,0,791,792,5,54,0,0,792,800,
  	3,104,52,0,793,794,5,55,0,0,794,795,3,104,52,0,795,796,5,54,0,0,796,797,
  	3,104,52,0,797,799,1,0,0,0,798,793,1,0,0,0,799,802,1,0,0,0,800,798,1,
  	0,0,0,800,801,1,0,0,0,801,803,1,0,0,0,802,800,1,0,0,0,803,804,5,56,0,
  	0,804,805,3,104,52,0,805,807,1,0,0,0,806,788,1,0,0,0,806,789,1,0,0,0,
  	807,105,1,0,0,0,808,815,3,108,54,0,809,810,5,23,0,0,810,813,3,108,54,
  	0,811,812,5,23,0,0,812,814,3,108,54,0,813,811,1,0,0,0,813,814,1,0,0,0,
  	814,816,1,0,0,0,815,809,1,0,0,0,815,816,1,0,0,0,816,107,1,0,0,0,817,822,
  	3,110,55,0,818,819,5,64,0,0,819,821,3,110,55,0,820,818,1,0,0,0,821,824,
  	1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,109,1,0,0,0,824,822,1,0,0,
  	0,825,830,3,112,56,0,826,827,5,65,0,0,827,829,3,112,56,0,828,826,1,0,
  	0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,111,1,0,0,0,832,
  	830,1,0,0,0,833,835,5,66,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,
  	1,0,0,0,836,837,3,114,57,0,837,113,1,0,0,0,838,842,3,118,59,0,839,840,
  	3,116,58,0,840,841,3,118,59,0,841,843,1,0,0,0,842,839,1,0,0,0,842,843,
  	1,0,0,0,843,115,1,0,0,0,844,845,7,4,0,0,845,117,1,0,0,0,846,848,3,120,
  	60,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,855,3,122,61,
  	0,850,851,3,120,60,0,851,852,3,122,61,0,852,854,1,0,0,0,853,850,1,0,0,
  	0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,119,1,0,0,0,857,
  	855,1,0,0,0,858,859,7,5,0,0,859,121,1,0,0,0,860,866,3,126,63,0,861,862,
  	3,124,62,0,862,863,3,126,63,0,863,865,1,0,0,0,864,861,1,0,0,0,865,868,
  	1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,123,1,0,0,0,868,866,1,0,0,
  	0,869,870,7,6,0,0,870,125,1,0,0,0,871,874,3,128,64,0,872,873,7,7,0,0,
  	873,875,3,128,64,0,874,872,1,0,0,0,874,875,1,0,0,0,875,127,1,0,0,0,876,
  	908,5,91,0,0,877,908,5,90,0,0,878,908,5,82,0,0,879,908,5,83,0,0,880,884,
  	3,130,65,0,881,884,5,25,0,0,882,884,5,49,0,0,883,880,1,0,0,0,883,881,
  	1,0,0,0,883,882,1,0,0,0,884,885,1,0,0,0,885,908,3,134,67,0,886,908,3,
  	132,66,0,887,888,5,22,0,0,888,889,3,144,72,0,889,890,5,24,0,0,890,908,
  	1,0,0,0,891,892,5,84,0,0,892,897,3,146,73,0,893,894,5,2,0,0,894,896,3,
  	146,73,0,895,893,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,897,898,1,0,
  	0,0,898,900,1,0,0,0,899,897,1,0,0,0,900,901,5,85,0,0,901,908,1,0,0,0,
  	902,903,5,86,0,0,903,904,3,136,68,0,904,905,5,37,0,0,905,908,1,0,0,0,
  	906,908,5,18,0,0,907,876,1,0,0,0,907,877,1,0,0,0,907,878,1,0,0,0,907,
  	879,1,0,0,0,907,883,1,0,0,0,907,886,1,0,0,0,907,887,1,0,0,0,907,891,1,
  	0,0,0,907,902,1,0,0,0,907,906,1,0,0,0,908,129,1,0,0,0,909,911,5,87,0,
  	0,910,909,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,917,5,89,0,0,913,
  	914,5,87,0,0,914,916,5,89,0,0,915,913,1,0,0,0,916,919,1,0,0,0,917,915,
  	1,0,0,0,917,918,1,0,0,0,918,131,1,0,0,0,919,917,1,0,0,0,920,922,5,87,
  	0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,925,5,89,0,0,
  	924,926,3,148,74,0,925,924,1,0,0,0,925,926,1,0,0,0,926,934,1,0,0,0,927,
  	928,5,87,0,0,928,930,5,89,0,0,929,931,3,148,74,0,930,929,1,0,0,0,930,
  	931,1,0,0,0,931,933,1,0,0,0,932,927,1,0,0,0,933,936,1,0,0,0,934,932,1,
  	0,0,0,934,935,1,0,0,0,935,133,1,0,0,0,936,934,1,0,0,0,937,939,5,22,0,
  	0,938,940,3,136,68,0,939,938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,
  	941,942,5,24,0,0,942,135,1,0,0,0,943,948,3,142,71,0,944,945,5,26,0,0,
  	945,949,3,136,68,0,946,947,5,57,0,0,947,949,3,92,46,0,948,944,1,0,0,0,
  	948,946,1,0,0,0,948,949,1,0,0,0,949,952,1,0,0,0,950,952,3,138,69,0,951,
  	943,1,0,0,0,951,950,1,0,0,0,952,137,1,0,0,0,953,956,3,140,70,0,954,955,
  	5,26,0,0,955,957,3,138,69,0,956,954,1,0,0,0,956,957,1,0,0,0,957,139,1,
  	0,0,0,958,959,5,89,0,0,959,960,5,20,0,0,960,961,3,142,71,0,961,141,1,
  	0,0,0,962,963,5,17,0,0,963,964,3,130,65,0,964,966,5,22,0,0,965,967,3,
  	138,69,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,969,5,24,
  	0,0,969,972,1,0,0,0,970,972,3,104,52,0,971,962,1,0,0,0,971,970,1,0,0,
  	0,972,143,1,0,0,0,973,975,3,104,52,0,974,973,1,0,0,0,974,975,1,0,0,0,
  	975,982,1,0,0,0,976,978,5,26,0,0,977,979,3,104,52,0,978,977,1,0,0,0,978,
  	979,1,0,0,0,979,981,1,0,0,0,980,976,1,0,0,0,981,984,1,0,0,0,982,980,1,
  	0,0,0,982,983,1,0,0,0,983,145,1,0,0,0,984,982,1,0,0,0,985,990,3,104,52,
  	0,986,987,5,26,0,0,987,989,3,104,52,0,988,986,1,0,0,0,989,992,1,0,0,0,
  	990,988,1,0,0,0,990,991,1,0,0,0,991,147,1,0,0,0,992,990,1,0,0,0,993,994,
  	5,84,0,0,994,999,3,150,75,0,995,996,5,26,0,0,996,998,3,150,75,0,997,995,
  	1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,1002,1,
  	0,0,0,1001,999,1,0,0,0,1002,1003,5,85,0,0,1003,149,1,0,0,0,1004,1007,
  	5,23,0,0,1005,1007,3,104,52,0,1006,1004,1,0,0,0,1006,1005,1,0,0,0,1007,
  	151,1,0,0,0,1008,1010,3,154,77,0,1009,1011,3,158,79,0,1010,1009,1,0,0,
  	0,1010,1011,1,0,0,0,1011,153,1,0,0,0,1012,1017,5,90,0,0,1013,1014,5,73,
  	0,0,1014,1016,5,90,0,0,1015,1013,1,0,0,0,1016,1019,1,0,0,0,1017,1015,
  	1,0,0,0,1017,1018,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,0,0,1020,1012,
  	1,0,0,0,1020,1021,1,0,0,0,1021,155,1,0,0,0,1022,1023,3,158,79,0,1023,
  	157,1,0,0,0,1024,1025,5,88,0,0,1025,1026,3,56,28,0,1026,159,1,0,0,0,132,
  	163,167,174,179,184,192,195,200,205,211,214,218,229,236,243,246,255,258,
  	262,275,288,301,303,308,311,314,317,322,329,334,341,347,350,353,356,360,
  	365,370,372,374,391,400,406,409,414,419,424,427,430,439,444,453,456,461,
  	467,471,480,485,488,491,495,499,505,508,512,515,520,523,536,542,546,554,
  	568,577,592,602,611,616,623,626,639,650,655,664,667,678,692,703,709,719,
  	731,740,745,759,770,775,800,806,813,815,822,830,834,842,847,855,866,874,
  	883,897,907,910,917,921,925,930,934,939,948,951,956,966,971,974,978,982,
  	990,999,1006,1010,1017,1020
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  modelicaParserStaticData = std::move(staticData);
}

}

modelicaParser::modelicaParser(TokenStream *input) : modelicaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

modelicaParser::modelicaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  modelicaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *modelicaParserStaticData->atn, modelicaParserStaticData->decisionToDFA, modelicaParserStaticData->sharedContextCache, options);
}

modelicaParser::~modelicaParser() {
  delete _interpreter;
}

const atn::ATN& modelicaParser::getATN() const {
  return *modelicaParserStaticData->atn;
}

std::string modelicaParser::getGrammarFileName() const {
  return "modelica.g4";
}

const std::vector<std::string>& modelicaParser::getRuleNames() const {
  return modelicaParserStaticData->ruleNames;
}

const dfa::Vocabulary& modelicaParser::getVocabulary() const {
  return modelicaParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView modelicaParser::getSerializedATN() const {
  return modelicaParserStaticData->serializedATN;
}


//----------------- Stored_definitionContext ------------------------------------------------------------------

modelicaParser::Stored_definitionContext::Stored_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Within_statementContext *> modelicaParser::Stored_definitionContext::within_statement() {
  return getRuleContexts<modelicaParser::Within_statementContext>();
}

modelicaParser::Within_statementContext* modelicaParser::Stored_definitionContext::within_statement(size_t i) {
  return getRuleContext<modelicaParser::Within_statementContext>(i);
}

std::vector<modelicaParser::Class_definitionContext *> modelicaParser::Stored_definitionContext::class_definition() {
  return getRuleContexts<modelicaParser::Class_definitionContext>();
}

modelicaParser::Class_definitionContext* modelicaParser::Stored_definitionContext::class_definition(size_t i) {
  return getRuleContext<modelicaParser::Class_definitionContext>(i);
}


size_t modelicaParser::Stored_definitionContext::getRuleIndex() const {
  return modelicaParser::RuleStored_definition;
}

void modelicaParser::Stored_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStored_definition(this);
}

void modelicaParser::Stored_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStored_definition(this);
}


std::any modelicaParser::Stored_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitStored_definition(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Stored_definitionContext* modelicaParser::stored_definition() {
  Stored_definitionContext *_localctx = _tracker.createInstance<Stored_definitionContext>(_ctx, getState());
  enterRule(_localctx, 0, modelicaParser::RuleStored_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(163);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__2) {
      setState(160);
      within_statement();
      setState(165);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(174);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 262130) != 0)) {
      setState(167);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__0) {
        setState(166);
        match(modelicaParser::T__0);
      }
      setState(169);
      class_definition();
      setState(170);
      match(modelicaParser::T__1);
      setState(176);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Within_statementContext ------------------------------------------------------------------

modelicaParser::Within_statementContext::Within_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::NameContext* modelicaParser::Within_statementContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}


size_t modelicaParser::Within_statementContext::getRuleIndex() const {
  return modelicaParser::RuleWithin_statement;
}

void modelicaParser::Within_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWithin_statement(this);
}

void modelicaParser::Within_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWithin_statement(this);
}


std::any modelicaParser::Within_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitWithin_statement(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Within_statementContext* modelicaParser::within_statement() {
  Within_statementContext *_localctx = _tracker.createInstance<Within_statementContext>(_ctx, getState());
  enterRule(_localctx, 2, modelicaParser::RuleWithin_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(177);
    match(modelicaParser::T__2);
    setState(179);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(178);
      name();
    }
    setState(181);
    match(modelicaParser::T__1);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_definitionContext ------------------------------------------------------------------

modelicaParser::Class_definitionContext::Class_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Class_prefixesContext* modelicaParser::Class_definitionContext::class_prefixes() {
  return getRuleContext<modelicaParser::Class_prefixesContext>(0);
}

modelicaParser::Class_specifierContext* modelicaParser::Class_definitionContext::class_specifier() {
  return getRuleContext<modelicaParser::Class_specifierContext>(0);
}


size_t modelicaParser::Class_definitionContext::getRuleIndex() const {
  return modelicaParser::RuleClass_definition;
}

void modelicaParser::Class_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_definition(this);
}

void modelicaParser::Class_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_definition(this);
}


std::any modelicaParser::Class_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitClass_definition(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Class_definitionContext* modelicaParser::class_definition() {
  Class_definitionContext *_localctx = _tracker.createInstance<Class_definitionContext>(_ctx, getState());
  enterRule(_localctx, 4, modelicaParser::RuleClass_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(184);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__3) {
      setState(183);
      match(modelicaParser::T__3);
    }
    setState(186);
    class_prefixes();
    setState(187);
    class_specifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_specifierContext ------------------------------------------------------------------

modelicaParser::Class_specifierContext::Class_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Long_class_specifierContext* modelicaParser::Class_specifierContext::long_class_specifier() {
  return getRuleContext<modelicaParser::Long_class_specifierContext>(0);
}

modelicaParser::Short_class_specifierContext* modelicaParser::Class_specifierContext::short_class_specifier() {
  return getRuleContext<modelicaParser::Short_class_specifierContext>(0);
}

modelicaParser::Der_class_specifierContext* modelicaParser::Class_specifierContext::der_class_specifier() {
  return getRuleContext<modelicaParser::Der_class_specifierContext>(0);
}


size_t modelicaParser::Class_specifierContext::getRuleIndex() const {
  return modelicaParser::RuleClass_specifier;
}

void modelicaParser::Class_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_specifier(this);
}

void modelicaParser::Class_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_specifier(this);
}


std::any modelicaParser::Class_specifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitClass_specifier(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Class_specifierContext* modelicaParser::class_specifier() {
  Class_specifierContext *_localctx = _tracker.createInstance<Class_specifierContext>(_ctx, getState());
  enterRule(_localctx, 6, modelicaParser::RuleClass_specifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(192);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(189);
      long_class_specifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(190);
      short_class_specifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(191);
      der_class_specifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_prefixesContext ------------------------------------------------------------------

modelicaParser::Class_prefixesContext::Class_prefixesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t modelicaParser::Class_prefixesContext::getRuleIndex() const {
  return modelicaParser::RuleClass_prefixes;
}

void modelicaParser::Class_prefixesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_prefixes(this);
}

void modelicaParser::Class_prefixesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_prefixes(this);
}


std::any modelicaParser::Class_prefixesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitClass_prefixes(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Class_prefixesContext* modelicaParser::class_prefixes() {
  Class_prefixesContext *_localctx = _tracker.createInstance<Class_prefixesContext>(_ctx, getState());
  enterRule(_localctx, 8, modelicaParser::RuleClass_prefixes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(195);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__4) {
      setState(194);
      match(modelicaParser::T__4);
    }
    setState(218);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(197);
      match(modelicaParser::T__5);
      break;
    }

    case 2: {
      setState(198);
      match(modelicaParser::T__6);
      break;
    }

    case 3: {
      setState(200);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__7) {
        setState(199);
        match(modelicaParser::T__7);
      }
      setState(202);
      match(modelicaParser::T__8);
      break;
    }

    case 4: {
      setState(203);
      match(modelicaParser::T__9);
      break;
    }

    case 5: {
      setState(205);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__10) {
        setState(204);
        match(modelicaParser::T__10);
      }
      setState(207);
      match(modelicaParser::T__11);
      break;
    }

    case 6: {
      setState(208);
      match(modelicaParser::T__12);
      break;
    }

    case 7: {
      setState(209);
      match(modelicaParser::T__13);
      break;
    }

    case 8: {
      setState(211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__14

      || _la == modelicaParser::T__15) {
        setState(210);
        _la = _input->LA(1);
        if (!(_la == modelicaParser::T__14

        || _la == modelicaParser::T__15)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(214);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__7) {
        setState(213);
        match(modelicaParser::T__7);
      }
      setState(216);
      match(modelicaParser::T__16);
      break;
    }

    case 9: {
      setState(217);
      match(modelicaParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Long_class_specifierContext ------------------------------------------------------------------

modelicaParser::Long_class_specifierContext::Long_class_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> modelicaParser::Long_class_specifierContext::IDENT() {
  return getTokens(modelicaParser::IDENT);
}

tree::TerminalNode* modelicaParser::Long_class_specifierContext::IDENT(size_t i) {
  return getToken(modelicaParser::IDENT, i);
}

modelicaParser::String_commentContext* modelicaParser::Long_class_specifierContext::string_comment() {
  return getRuleContext<modelicaParser::String_commentContext>(0);
}

modelicaParser::CompositionContext* modelicaParser::Long_class_specifierContext::composition() {
  return getRuleContext<modelicaParser::CompositionContext>(0);
}

modelicaParser::Class_modificationContext* modelicaParser::Long_class_specifierContext::class_modification() {
  return getRuleContext<modelicaParser::Class_modificationContext>(0);
}


size_t modelicaParser::Long_class_specifierContext::getRuleIndex() const {
  return modelicaParser::RuleLong_class_specifier;
}

void modelicaParser::Long_class_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLong_class_specifier(this);
}

void modelicaParser::Long_class_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLong_class_specifier(this);
}


std::any modelicaParser::Long_class_specifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitLong_class_specifier(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Long_class_specifierContext* modelicaParser::long_class_specifier() {
  Long_class_specifierContext *_localctx = _tracker.createInstance<Long_class_specifierContext>(_ctx, getState());
  enterRule(_localctx, 10, modelicaParser::RuleLong_class_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(236);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::IDENT: {
        enterOuterAlt(_localctx, 1);
        setState(220);
        match(modelicaParser::IDENT);
        setState(221);
        string_comment();
        setState(222);
        composition();
        setState(223);
        match(modelicaParser::T__17);
        setState(224);
        match(modelicaParser::IDENT);
        break;
      }

      case modelicaParser::T__18: {
        enterOuterAlt(_localctx, 2);
        setState(226);
        match(modelicaParser::T__18);
        setState(227);
        match(modelicaParser::IDENT);
        setState(229);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == modelicaParser::T__21) {
          setState(228);
          class_modification();
        }
        setState(231);
        string_comment();
        setState(232);
        composition();
        setState(233);
        match(modelicaParser::T__17);
        setState(234);
        match(modelicaParser::IDENT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Short_class_specifierContext ------------------------------------------------------------------

modelicaParser::Short_class_specifierContext::Short_class_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::Short_class_specifierContext::IDENT() {
  return getToken(modelicaParser::IDENT, 0);
}

modelicaParser::Base_prefixContext* modelicaParser::Short_class_specifierContext::base_prefix() {
  return getRuleContext<modelicaParser::Base_prefixContext>(0);
}

modelicaParser::NameContext* modelicaParser::Short_class_specifierContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::CommentContext* modelicaParser::Short_class_specifierContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}

modelicaParser::Array_subscriptsContext* modelicaParser::Short_class_specifierContext::array_subscripts() {
  return getRuleContext<modelicaParser::Array_subscriptsContext>(0);
}

modelicaParser::Class_modificationContext* modelicaParser::Short_class_specifierContext::class_modification() {
  return getRuleContext<modelicaParser::Class_modificationContext>(0);
}

modelicaParser::Enum_listContext* modelicaParser::Short_class_specifierContext::enum_list() {
  return getRuleContext<modelicaParser::Enum_listContext>(0);
}


size_t modelicaParser::Short_class_specifierContext::getRuleIndex() const {
  return modelicaParser::RuleShort_class_specifier;
}

void modelicaParser::Short_class_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShort_class_specifier(this);
}

void modelicaParser::Short_class_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShort_class_specifier(this);
}


std::any modelicaParser::Short_class_specifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitShort_class_specifier(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Short_class_specifierContext* modelicaParser::short_class_specifier() {
  Short_class_specifierContext *_localctx = _tracker.createInstance<Short_class_specifierContext>(_ctx, getState());
  enterRule(_localctx, 12, modelicaParser::RuleShort_class_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(262);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(238);
      match(modelicaParser::IDENT);
      setState(239);
      match(modelicaParser::T__19);
      setState(240);
      base_prefix();
      setState(241);
      name();
      setState(243);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__83) {
        setState(242);
        array_subscripts();
      }
      setState(246);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__21) {
        setState(245);
        class_modification();
      }
      setState(248);
      comment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(250);
      match(modelicaParser::IDENT);
      setState(251);
      match(modelicaParser::T__19);
      setState(252);
      match(modelicaParser::T__20);
      setState(253);
      match(modelicaParser::T__21);
      setState(258);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case modelicaParser::T__23:
        case modelicaParser::IDENT: {
          setState(255);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == modelicaParser::IDENT) {
            setState(254);
            enum_list();
          }
          break;
        }

        case modelicaParser::T__22: {
          setState(257);
          match(modelicaParser::T__22);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(260);
      match(modelicaParser::T__23);
      setState(261);
      comment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Der_class_specifierContext ------------------------------------------------------------------

modelicaParser::Der_class_specifierContext::Der_class_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> modelicaParser::Der_class_specifierContext::IDENT() {
  return getTokens(modelicaParser::IDENT);
}

tree::TerminalNode* modelicaParser::Der_class_specifierContext::IDENT(size_t i) {
  return getToken(modelicaParser::IDENT, i);
}

modelicaParser::NameContext* modelicaParser::Der_class_specifierContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::CommentContext* modelicaParser::Der_class_specifierContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}


size_t modelicaParser::Der_class_specifierContext::getRuleIndex() const {
  return modelicaParser::RuleDer_class_specifier;
}

void modelicaParser::Der_class_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDer_class_specifier(this);
}

void modelicaParser::Der_class_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDer_class_specifier(this);
}


std::any modelicaParser::Der_class_specifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitDer_class_specifier(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Der_class_specifierContext* modelicaParser::der_class_specifier() {
  Der_class_specifierContext *_localctx = _tracker.createInstance<Der_class_specifierContext>(_ctx, getState());
  enterRule(_localctx, 14, modelicaParser::RuleDer_class_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(264);
    match(modelicaParser::IDENT);
    setState(265);
    match(modelicaParser::T__19);
    setState(266);
    match(modelicaParser::T__24);
    setState(267);
    match(modelicaParser::T__21);
    setState(268);
    name();
    setState(269);
    match(modelicaParser::T__25);
    setState(270);
    match(modelicaParser::IDENT);
    setState(275);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(271);
      match(modelicaParser::T__25);
      setState(272);
      match(modelicaParser::IDENT);
      setState(277);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(278);
    match(modelicaParser::T__23);
    setState(279);
    comment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_prefixContext ------------------------------------------------------------------

modelicaParser::Base_prefixContext::Base_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Type_prefixContext* modelicaParser::Base_prefixContext::type_prefix() {
  return getRuleContext<modelicaParser::Type_prefixContext>(0);
}


size_t modelicaParser::Base_prefixContext::getRuleIndex() const {
  return modelicaParser::RuleBase_prefix;
}

void modelicaParser::Base_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBase_prefix(this);
}

void modelicaParser::Base_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBase_prefix(this);
}


std::any modelicaParser::Base_prefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitBase_prefix(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Base_prefixContext* modelicaParser::base_prefix() {
  Base_prefixContext *_localctx = _tracker.createInstance<Base_prefixContext>(_ctx, getState());
  enterRule(_localctx, 16, modelicaParser::RuleBase_prefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(281);
    type_prefix();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_listContext ------------------------------------------------------------------

modelicaParser::Enum_listContext::Enum_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Enumeration_literalContext *> modelicaParser::Enum_listContext::enumeration_literal() {
  return getRuleContexts<modelicaParser::Enumeration_literalContext>();
}

modelicaParser::Enumeration_literalContext* modelicaParser::Enum_listContext::enumeration_literal(size_t i) {
  return getRuleContext<modelicaParser::Enumeration_literalContext>(i);
}


size_t modelicaParser::Enum_listContext::getRuleIndex() const {
  return modelicaParser::RuleEnum_list;
}

void modelicaParser::Enum_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_list(this);
}

void modelicaParser::Enum_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_list(this);
}


std::any modelicaParser::Enum_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitEnum_list(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Enum_listContext* modelicaParser::enum_list() {
  Enum_listContext *_localctx = _tracker.createInstance<Enum_listContext>(_ctx, getState());
  enterRule(_localctx, 18, modelicaParser::RuleEnum_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(283);
    enumeration_literal();
    setState(288);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(284);
      match(modelicaParser::T__25);
      setState(285);
      enumeration_literal();
      setState(290);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_literalContext ------------------------------------------------------------------

modelicaParser::Enumeration_literalContext::Enumeration_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::Enumeration_literalContext::IDENT() {
  return getToken(modelicaParser::IDENT, 0);
}

modelicaParser::CommentContext* modelicaParser::Enumeration_literalContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}


size_t modelicaParser::Enumeration_literalContext::getRuleIndex() const {
  return modelicaParser::RuleEnumeration_literal;
}

void modelicaParser::Enumeration_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_literal(this);
}

void modelicaParser::Enumeration_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_literal(this);
}


std::any modelicaParser::Enumeration_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitEnumeration_literal(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Enumeration_literalContext* modelicaParser::enumeration_literal() {
  Enumeration_literalContext *_localctx = _tracker.createInstance<Enumeration_literalContext>(_ctx, getState());
  enterRule(_localctx, 20, modelicaParser::RuleEnumeration_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(291);
    match(modelicaParser::IDENT);
    setState(292);
    comment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompositionContext ------------------------------------------------------------------

modelicaParser::CompositionContext::CompositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Element_listContext *> modelicaParser::CompositionContext::element_list() {
  return getRuleContexts<modelicaParser::Element_listContext>();
}

modelicaParser::Element_listContext* modelicaParser::CompositionContext::element_list(size_t i) {
  return getRuleContext<modelicaParser::Element_listContext>(i);
}

std::vector<modelicaParser::Equation_sectionContext *> modelicaParser::CompositionContext::equation_section() {
  return getRuleContexts<modelicaParser::Equation_sectionContext>();
}

modelicaParser::Equation_sectionContext* modelicaParser::CompositionContext::equation_section(size_t i) {
  return getRuleContext<modelicaParser::Equation_sectionContext>(i);
}

std::vector<modelicaParser::Algorithm_sectionContext *> modelicaParser::CompositionContext::algorithm_section() {
  return getRuleContexts<modelicaParser::Algorithm_sectionContext>();
}

modelicaParser::Algorithm_sectionContext* modelicaParser::CompositionContext::algorithm_section(size_t i) {
  return getRuleContext<modelicaParser::Algorithm_sectionContext>(i);
}

modelicaParser::Model_annotationContext* modelicaParser::CompositionContext::model_annotation() {
  return getRuleContext<modelicaParser::Model_annotationContext>(0);
}

modelicaParser::Language_specificationContext* modelicaParser::CompositionContext::language_specification() {
  return getRuleContext<modelicaParser::Language_specificationContext>(0);
}

modelicaParser::External_function_callContext* modelicaParser::CompositionContext::external_function_call() {
  return getRuleContext<modelicaParser::External_function_callContext>(0);
}

modelicaParser::AnnotationContext* modelicaParser::CompositionContext::annotation() {
  return getRuleContext<modelicaParser::AnnotationContext>(0);
}


size_t modelicaParser::CompositionContext::getRuleIndex() const {
  return modelicaParser::RuleComposition;
}

void modelicaParser::CompositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComposition(this);
}

void modelicaParser::CompositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComposition(this);
}


std::any modelicaParser::CompositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComposition(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::CompositionContext* modelicaParser::composition() {
  CompositionContext *_localctx = _tracker.createInstance<CompositionContext>(_ctx, getState());
  enterRule(_localctx, 22, modelicaParser::RuleComposition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(294);
    element_list();
    setState(303);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3940650076602368) != 0)) {
      setState(301);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
      case 1: {
        setState(295);
        match(modelicaParser::T__26);
        setState(296);
        element_list();
        break;
      }

      case 2: {
        setState(297);
        match(modelicaParser::T__27);
        setState(298);
        element_list();
        break;
      }

      case 3: {
        setState(299);
        equation_section();
        break;
      }

      case 4: {
        setState(300);
        algorithm_section();
        break;
      }

      default:
        break;
      }
      setState(305);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__28) {
      setState(306);
      match(modelicaParser::T__28);
      setState(308);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::STRING) {
        setState(307);
        language_specification();
      }
      setState(311);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__86

      || _la == modelicaParser::IDENT) {
        setState(310);
        external_function_call();
      }
      setState(314);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__87) {
        setState(313);
        annotation();
      }
      setState(316);
      match(modelicaParser::T__1);
    }
    setState(322);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__87) {
      setState(319);
      model_annotation();
      setState(320);
      match(modelicaParser::T__1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Language_specificationContext ------------------------------------------------------------------

modelicaParser::Language_specificationContext::Language_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::Language_specificationContext::STRING() {
  return getToken(modelicaParser::STRING, 0);
}


size_t modelicaParser::Language_specificationContext::getRuleIndex() const {
  return modelicaParser::RuleLanguage_specification;
}

void modelicaParser::Language_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLanguage_specification(this);
}

void modelicaParser::Language_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLanguage_specification(this);
}


std::any modelicaParser::Language_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitLanguage_specification(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Language_specificationContext* modelicaParser::language_specification() {
  Language_specificationContext *_localctx = _tracker.createInstance<Language_specificationContext>(_ctx, getState());
  enterRule(_localctx, 24, modelicaParser::RuleLanguage_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(324);
    match(modelicaParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- External_function_callContext ------------------------------------------------------------------

modelicaParser::External_function_callContext::External_function_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::External_function_callContext::IDENT() {
  return getToken(modelicaParser::IDENT, 0);
}

modelicaParser::Component_referenceContext* modelicaParser::External_function_callContext::component_reference() {
  return getRuleContext<modelicaParser::Component_referenceContext>(0);
}

modelicaParser::Expression_listContext* modelicaParser::External_function_callContext::expression_list() {
  return getRuleContext<modelicaParser::Expression_listContext>(0);
}


size_t modelicaParser::External_function_callContext::getRuleIndex() const {
  return modelicaParser::RuleExternal_function_call;
}

void modelicaParser::External_function_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternal_function_call(this);
}

void modelicaParser::External_function_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternal_function_call(this);
}


std::any modelicaParser::External_function_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitExternal_function_call(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::External_function_callContext* modelicaParser::external_function_call() {
  External_function_callContext *_localctx = _tracker.createInstance<External_function_callContext>(_ctx, getState());
  enterRule(_localctx, 26, modelicaParser::RuleExternal_function_call);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(329);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(326);
      component_reference();
      setState(327);
      match(modelicaParser::T__19);
      break;
    }

    default:
      break;
    }
    setState(331);
    match(modelicaParser::IDENT);
    setState(332);
    match(modelicaParser::T__21);
    setState(334);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 633318735609856) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 62326657) != 0)) {
      setState(333);
      expression_list();
    }
    setState(336);
    match(modelicaParser::T__23);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_listContext ------------------------------------------------------------------

modelicaParser::Element_listContext::Element_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ElementContext *> modelicaParser::Element_listContext::element() {
  return getRuleContexts<modelicaParser::ElementContext>();
}

modelicaParser::ElementContext* modelicaParser::Element_listContext::element(size_t i) {
  return getRuleContext<modelicaParser::ElementContext>(i);
}


size_t modelicaParser::Element_listContext::getRuleIndex() const {
  return modelicaParser::RuleElement_list;
}

void modelicaParser::Element_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_list(this);
}

void modelicaParser::Element_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_list(this);
}


std::any modelicaParser::Element_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitElement_list(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Element_listContext* modelicaParser::element_list() {
  Element_listContext *_localctx = _tracker.createInstance<Element_listContext>(_ctx, getState());
  enterRule(_localctx, 28, modelicaParser::RuleElement_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(341);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 69852275146738) != 0) || _la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(338);
      element();
      setState(343);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementContext ------------------------------------------------------------------

modelicaParser::ElementContext::ElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Import_clauseContext* modelicaParser::ElementContext::import_clause() {
  return getRuleContext<modelicaParser::Import_clauseContext>(0);
}

modelicaParser::Extends_clauseContext* modelicaParser::ElementContext::extends_clause() {
  return getRuleContext<modelicaParser::Extends_clauseContext>(0);
}

modelicaParser::Class_definitionContext* modelicaParser::ElementContext::class_definition() {
  return getRuleContext<modelicaParser::Class_definitionContext>(0);
}

modelicaParser::Component_clauseContext* modelicaParser::ElementContext::component_clause() {
  return getRuleContext<modelicaParser::Component_clauseContext>(0);
}

modelicaParser::Constraining_clauseContext* modelicaParser::ElementContext::constraining_clause() {
  return getRuleContext<modelicaParser::Constraining_clauseContext>(0);
}

modelicaParser::CommentContext* modelicaParser::ElementContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}


size_t modelicaParser::ElementContext::getRuleIndex() const {
  return modelicaParser::RuleElement;
}

void modelicaParser::ElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement(this);
}

void modelicaParser::ElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement(this);
}


std::any modelicaParser::ElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitElement(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::ElementContext* modelicaParser::element() {
  ElementContext *_localctx = _tracker.createInstance<ElementContext>(_ctx, getState());
  enterRule(_localctx, 30, modelicaParser::RuleElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(374);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__33: {
        setState(344);
        import_clause();
        break;
      }

      case modelicaParser::T__18: {
        setState(345);
        extends_clause();
        break;
      }

      case modelicaParser::T__0:
      case modelicaParser::T__3:
      case modelicaParser::T__4:
      case modelicaParser::T__5:
      case modelicaParser::T__6:
      case modelicaParser::T__7:
      case modelicaParser::T__8:
      case modelicaParser::T__9:
      case modelicaParser::T__10:
      case modelicaParser::T__11:
      case modelicaParser::T__12:
      case modelicaParser::T__13:
      case modelicaParser::T__14:
      case modelicaParser::T__15:
      case modelicaParser::T__16:
      case modelicaParser::T__29:
      case modelicaParser::T__30:
      case modelicaParser::T__31:
      case modelicaParser::T__32:
      case modelicaParser::T__38:
      case modelicaParser::T__39:
      case modelicaParser::T__40:
      case modelicaParser::T__41:
      case modelicaParser::T__42:
      case modelicaParser::T__43:
      case modelicaParser::T__44:
      case modelicaParser::T__86:
      case modelicaParser::IDENT: {
        setState(347);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == modelicaParser::T__29) {
          setState(346);
          match(modelicaParser::T__29);
        }
        setState(350);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == modelicaParser::T__0) {
          setState(349);
          match(modelicaParser::T__0);
        }
        setState(353);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == modelicaParser::T__30) {
          setState(352);
          match(modelicaParser::T__30);
        }
        setState(356);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == modelicaParser::T__31) {
          setState(355);
          match(modelicaParser::T__31);
        }
        setState(372);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case modelicaParser::T__3:
          case modelicaParser::T__4:
          case modelicaParser::T__5:
          case modelicaParser::T__6:
          case modelicaParser::T__7:
          case modelicaParser::T__8:
          case modelicaParser::T__9:
          case modelicaParser::T__10:
          case modelicaParser::T__11:
          case modelicaParser::T__12:
          case modelicaParser::T__13:
          case modelicaParser::T__14:
          case modelicaParser::T__15:
          case modelicaParser::T__16:
          case modelicaParser::T__38:
          case modelicaParser::T__39:
          case modelicaParser::T__40:
          case modelicaParser::T__41:
          case modelicaParser::T__42:
          case modelicaParser::T__43:
          case modelicaParser::T__44:
          case modelicaParser::T__86:
          case modelicaParser::IDENT: {
            setState(360);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case modelicaParser::T__3:
              case modelicaParser::T__4:
              case modelicaParser::T__5:
              case modelicaParser::T__6:
              case modelicaParser::T__7:
              case modelicaParser::T__8:
              case modelicaParser::T__9:
              case modelicaParser::T__10:
              case modelicaParser::T__11:
              case modelicaParser::T__12:
              case modelicaParser::T__13:
              case modelicaParser::T__14:
              case modelicaParser::T__15:
              case modelicaParser::T__16: {
                setState(358);
                class_definition();
                break;
              }

              case modelicaParser::T__38:
              case modelicaParser::T__39:
              case modelicaParser::T__40:
              case modelicaParser::T__41:
              case modelicaParser::T__42:
              case modelicaParser::T__43:
              case modelicaParser::T__44:
              case modelicaParser::T__86:
              case modelicaParser::IDENT: {
                setState(359);
                component_clause();
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            break;
          }

          case modelicaParser::T__32: {
            setState(362);
            match(modelicaParser::T__32);
            setState(365);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case modelicaParser::T__3:
              case modelicaParser::T__4:
              case modelicaParser::T__5:
              case modelicaParser::T__6:
              case modelicaParser::T__7:
              case modelicaParser::T__8:
              case modelicaParser::T__9:
              case modelicaParser::T__10:
              case modelicaParser::T__11:
              case modelicaParser::T__12:
              case modelicaParser::T__13:
              case modelicaParser::T__14:
              case modelicaParser::T__15:
              case modelicaParser::T__16: {
                setState(363);
                class_definition();
                break;
              }

              case modelicaParser::T__38:
              case modelicaParser::T__39:
              case modelicaParser::T__40:
              case modelicaParser::T__41:
              case modelicaParser::T__42:
              case modelicaParser::T__43:
              case modelicaParser::T__44:
              case modelicaParser::T__86:
              case modelicaParser::IDENT: {
                setState(364);
                component_clause();
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(370);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == modelicaParser::T__37) {
              setState(367);
              constraining_clause();
              setState(368);
              comment();
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(376);
    match(modelicaParser::T__1);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_clauseContext ------------------------------------------------------------------

modelicaParser::Import_clauseContext::Import_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::CommentContext* modelicaParser::Import_clauseContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}

tree::TerminalNode* modelicaParser::Import_clauseContext::IDENT() {
  return getToken(modelicaParser::IDENT, 0);
}

modelicaParser::NameContext* modelicaParser::Import_clauseContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::Import_listContext* modelicaParser::Import_clauseContext::import_list() {
  return getRuleContext<modelicaParser::Import_listContext>(0);
}


size_t modelicaParser::Import_clauseContext::getRuleIndex() const {
  return modelicaParser::RuleImport_clause;
}

void modelicaParser::Import_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_clause(this);
}

void modelicaParser::Import_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_clause(this);
}


std::any modelicaParser::Import_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitImport_clause(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Import_clauseContext* modelicaParser::import_clause() {
  Import_clauseContext *_localctx = _tracker.createInstance<Import_clauseContext>(_ctx, getState());
  enterRule(_localctx, 32, modelicaParser::RuleImport_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(378);
    match(modelicaParser::T__33);
    setState(391);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      setState(379);
      match(modelicaParser::IDENT);
      setState(380);
      match(modelicaParser::T__19);
      setState(381);
      name();
      break;
    }

    case 2: {
      setState(382);
      name();
      setState(383);
      match(modelicaParser::T__34);
      break;
    }

    case 3: {
      setState(385);
      name();
      setState(386);
      match(modelicaParser::T__35);
      setState(387);
      import_list();
      setState(388);
      match(modelicaParser::T__36);
      break;
    }

    case 4: {
      setState(390);
      name();
      break;
    }

    default:
      break;
    }
    setState(393);
    comment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_listContext ------------------------------------------------------------------

modelicaParser::Import_listContext::Import_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> modelicaParser::Import_listContext::IDENT() {
  return getTokens(modelicaParser::IDENT);
}

tree::TerminalNode* modelicaParser::Import_listContext::IDENT(size_t i) {
  return getToken(modelicaParser::IDENT, i);
}


size_t modelicaParser::Import_listContext::getRuleIndex() const {
  return modelicaParser::RuleImport_list;
}

void modelicaParser::Import_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_list(this);
}

void modelicaParser::Import_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_list(this);
}


std::any modelicaParser::Import_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitImport_list(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Import_listContext* modelicaParser::import_list() {
  Import_listContext *_localctx = _tracker.createInstance<Import_listContext>(_ctx, getState());
  enterRule(_localctx, 34, modelicaParser::RuleImport_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(395);
    match(modelicaParser::IDENT);
    setState(400);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(396);
      match(modelicaParser::T__25);
      setState(397);
      match(modelicaParser::IDENT);
      setState(402);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extends_clauseContext ------------------------------------------------------------------

modelicaParser::Extends_clauseContext::Extends_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::NameContext* modelicaParser::Extends_clauseContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::Class_modificationContext* modelicaParser::Extends_clauseContext::class_modification() {
  return getRuleContext<modelicaParser::Class_modificationContext>(0);
}

modelicaParser::AnnotationContext* modelicaParser::Extends_clauseContext::annotation() {
  return getRuleContext<modelicaParser::AnnotationContext>(0);
}


size_t modelicaParser::Extends_clauseContext::getRuleIndex() const {
  return modelicaParser::RuleExtends_clause;
}

void modelicaParser::Extends_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtends_clause(this);
}

void modelicaParser::Extends_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtends_clause(this);
}


std::any modelicaParser::Extends_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitExtends_clause(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Extends_clauseContext* modelicaParser::extends_clause() {
  Extends_clauseContext *_localctx = _tracker.createInstance<Extends_clauseContext>(_ctx, getState());
  enterRule(_localctx, 36, modelicaParser::RuleExtends_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(403);
    match(modelicaParser::T__18);
    setState(404);
    name();
    setState(406);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__21) {
      setState(405);
      class_modification();
    }
    setState(409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__87) {
      setState(408);
      annotation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraining_clauseContext ------------------------------------------------------------------

modelicaParser::Constraining_clauseContext::Constraining_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::NameContext* modelicaParser::Constraining_clauseContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::Class_modificationContext* modelicaParser::Constraining_clauseContext::class_modification() {
  return getRuleContext<modelicaParser::Class_modificationContext>(0);
}


size_t modelicaParser::Constraining_clauseContext::getRuleIndex() const {
  return modelicaParser::RuleConstraining_clause;
}

void modelicaParser::Constraining_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraining_clause(this);
}

void modelicaParser::Constraining_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraining_clause(this);
}


std::any modelicaParser::Constraining_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitConstraining_clause(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Constraining_clauseContext* modelicaParser::constraining_clause() {
  Constraining_clauseContext *_localctx = _tracker.createInstance<Constraining_clauseContext>(_ctx, getState());
  enterRule(_localctx, 38, modelicaParser::RuleConstraining_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(411);
    match(modelicaParser::T__37);
    setState(412);
    name();
    setState(414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__21) {
      setState(413);
      class_modification();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_clauseContext ------------------------------------------------------------------

modelicaParser::Component_clauseContext::Component_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Type_prefixContext* modelicaParser::Component_clauseContext::type_prefix() {
  return getRuleContext<modelicaParser::Type_prefixContext>(0);
}

modelicaParser::Type_specifierContext* modelicaParser::Component_clauseContext::type_specifier() {
  return getRuleContext<modelicaParser::Type_specifierContext>(0);
}

modelicaParser::Component_listContext* modelicaParser::Component_clauseContext::component_list() {
  return getRuleContext<modelicaParser::Component_listContext>(0);
}

modelicaParser::Array_subscriptsContext* modelicaParser::Component_clauseContext::array_subscripts() {
  return getRuleContext<modelicaParser::Array_subscriptsContext>(0);
}


size_t modelicaParser::Component_clauseContext::getRuleIndex() const {
  return modelicaParser::RuleComponent_clause;
}

void modelicaParser::Component_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_clause(this);
}

void modelicaParser::Component_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_clause(this);
}


std::any modelicaParser::Component_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComponent_clause(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Component_clauseContext* modelicaParser::component_clause() {
  Component_clauseContext *_localctx = _tracker.createInstance<Component_clauseContext>(_ctx, getState());
  enterRule(_localctx, 40, modelicaParser::RuleComponent_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(416);
    type_prefix();
    setState(417);
    type_specifier();
    setState(419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__83) {
      setState(418);
      array_subscripts();
    }
    setState(421);
    component_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_prefixContext ------------------------------------------------------------------

modelicaParser::Type_prefixContext::Type_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t modelicaParser::Type_prefixContext::getRuleIndex() const {
  return modelicaParser::RuleType_prefix;
}

void modelicaParser::Type_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_prefix(this);
}

void modelicaParser::Type_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_prefix(this);
}


std::any modelicaParser::Type_prefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitType_prefix(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Type_prefixContext* modelicaParser::type_prefix() {
  Type_prefixContext *_localctx = _tracker.createInstance<Type_prefixContext>(_ctx, getState());
  enterRule(_localctx, 42, modelicaParser::RuleType_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(424);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__38

    || _la == modelicaParser::T__39) {
      setState(423);
      _la = _input->LA(1);
      if (!(_la == modelicaParser::T__38

      || _la == modelicaParser::T__39)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(427);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 15393162788864) != 0)) {
      setState(426);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 15393162788864) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__43

    || _la == modelicaParser::T__44) {
      setState(429);
      _la = _input->LA(1);
      if (!(_la == modelicaParser::T__43

      || _la == modelicaParser::T__44)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_specifierContext ------------------------------------------------------------------

modelicaParser::Type_specifierContext::Type_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::NameContext* modelicaParser::Type_specifierContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}


size_t modelicaParser::Type_specifierContext::getRuleIndex() const {
  return modelicaParser::RuleType_specifier;
}

void modelicaParser::Type_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_specifier(this);
}

void modelicaParser::Type_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_specifier(this);
}


std::any modelicaParser::Type_specifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitType_specifier(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Type_specifierContext* modelicaParser::type_specifier() {
  Type_specifierContext *_localctx = _tracker.createInstance<Type_specifierContext>(_ctx, getState());
  enterRule(_localctx, 44, modelicaParser::RuleType_specifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_listContext ------------------------------------------------------------------

modelicaParser::Component_listContext::Component_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Component_declarationContext *> modelicaParser::Component_listContext::component_declaration() {
  return getRuleContexts<modelicaParser::Component_declarationContext>();
}

modelicaParser::Component_declarationContext* modelicaParser::Component_listContext::component_declaration(size_t i) {
  return getRuleContext<modelicaParser::Component_declarationContext>(i);
}


size_t modelicaParser::Component_listContext::getRuleIndex() const {
  return modelicaParser::RuleComponent_list;
}

void modelicaParser::Component_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_list(this);
}

void modelicaParser::Component_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_list(this);
}


std::any modelicaParser::Component_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComponent_list(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Component_listContext* modelicaParser::component_list() {
  Component_listContext *_localctx = _tracker.createInstance<Component_listContext>(_ctx, getState());
  enterRule(_localctx, 46, modelicaParser::RuleComponent_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(434);
    component_declaration();
    setState(439);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(435);
      match(modelicaParser::T__25);
      setState(436);
      component_declaration();
      setState(441);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_declarationContext ------------------------------------------------------------------

modelicaParser::Component_declarationContext::Component_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::DeclarationContext* modelicaParser::Component_declarationContext::declaration() {
  return getRuleContext<modelicaParser::DeclarationContext>(0);
}

modelicaParser::CommentContext* modelicaParser::Component_declarationContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}

modelicaParser::Condition_attributeContext* modelicaParser::Component_declarationContext::condition_attribute() {
  return getRuleContext<modelicaParser::Condition_attributeContext>(0);
}


size_t modelicaParser::Component_declarationContext::getRuleIndex() const {
  return modelicaParser::RuleComponent_declaration;
}

void modelicaParser::Component_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_declaration(this);
}

void modelicaParser::Component_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_declaration(this);
}


std::any modelicaParser::Component_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComponent_declaration(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Component_declarationContext* modelicaParser::component_declaration() {
  Component_declarationContext *_localctx = _tracker.createInstance<Component_declarationContext>(_ctx, getState());
  enterRule(_localctx, 48, modelicaParser::RuleComponent_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(442);
    declaration();
    setState(444);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__45) {
      setState(443);
      condition_attribute();
    }
    setState(446);
    comment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Condition_attributeContext ------------------------------------------------------------------

modelicaParser::Condition_attributeContext::Condition_attributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::ExpressionContext* modelicaParser::Condition_attributeContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}


size_t modelicaParser::Condition_attributeContext::getRuleIndex() const {
  return modelicaParser::RuleCondition_attribute;
}

void modelicaParser::Condition_attributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCondition_attribute(this);
}

void modelicaParser::Condition_attributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCondition_attribute(this);
}


std::any modelicaParser::Condition_attributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitCondition_attribute(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Condition_attributeContext* modelicaParser::condition_attribute() {
  Condition_attributeContext *_localctx = _tracker.createInstance<Condition_attributeContext>(_ctx, getState());
  enterRule(_localctx, 50, modelicaParser::RuleCondition_attribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    match(modelicaParser::T__45);
    setState(449);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

modelicaParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::DeclarationContext::IDENT() {
  return getToken(modelicaParser::IDENT, 0);
}

modelicaParser::Array_subscriptsContext* modelicaParser::DeclarationContext::array_subscripts() {
  return getRuleContext<modelicaParser::Array_subscriptsContext>(0);
}

modelicaParser::ModificationContext* modelicaParser::DeclarationContext::modification() {
  return getRuleContext<modelicaParser::ModificationContext>(0);
}


size_t modelicaParser::DeclarationContext::getRuleIndex() const {
  return modelicaParser::RuleDeclaration;
}

void modelicaParser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void modelicaParser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}


std::any modelicaParser::DeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitDeclaration(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::DeclarationContext* modelicaParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 52, modelicaParser::RuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(451);
    match(modelicaParser::IDENT);
    setState(453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__83) {
      setState(452);
      array_subscripts();
    }
    setState(456);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140737493598208) != 0)) {
      setState(455);
      modification();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModificationContext ------------------------------------------------------------------

modelicaParser::ModificationContext::ModificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Class_modificationContext* modelicaParser::ModificationContext::class_modification() {
  return getRuleContext<modelicaParser::Class_modificationContext>(0);
}

modelicaParser::ExpressionContext* modelicaParser::ModificationContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}


size_t modelicaParser::ModificationContext::getRuleIndex() const {
  return modelicaParser::RuleModification;
}

void modelicaParser::ModificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModification(this);
}

void modelicaParser::ModificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModification(this);
}


std::any modelicaParser::ModificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitModification(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::ModificationContext* modelicaParser::modification() {
  ModificationContext *_localctx = _tracker.createInstance<ModificationContext>(_ctx, getState());
  enterRule(_localctx, 54, modelicaParser::RuleModification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(467);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__21: {
        enterOuterAlt(_localctx, 1);
        setState(458);
        class_modification();
        setState(461);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == modelicaParser::T__19) {
          setState(459);
          match(modelicaParser::T__19);
          setState(460);
          expression();
        }
        break;
      }

      case modelicaParser::T__19: {
        enterOuterAlt(_localctx, 2);
        setState(463);
        match(modelicaParser::T__19);
        setState(464);
        expression();
        break;
      }

      case modelicaParser::T__46: {
        enterOuterAlt(_localctx, 3);
        setState(465);
        match(modelicaParser::T__46);
        setState(466);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_modificationContext ------------------------------------------------------------------

modelicaParser::Class_modificationContext::Class_modificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Argument_listContext* modelicaParser::Class_modificationContext::argument_list() {
  return getRuleContext<modelicaParser::Argument_listContext>(0);
}


size_t modelicaParser::Class_modificationContext::getRuleIndex() const {
  return modelicaParser::RuleClass_modification;
}

void modelicaParser::Class_modificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_modification(this);
}

void modelicaParser::Class_modificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_modification(this);
}


std::any modelicaParser::Class_modificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitClass_modification(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Class_modificationContext* modelicaParser::class_modification() {
  Class_modificationContext *_localctx = _tracker.createInstance<Class_modificationContext>(_ctx, getState());
  enterRule(_localctx, 56, modelicaParser::RuleClass_modification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    match(modelicaParser::T__21);
    setState(471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281484640387074) != 0) || _la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(470);
      argument_list();
    }
    setState(473);
    match(modelicaParser::T__23);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_listContext ------------------------------------------------------------------

modelicaParser::Argument_listContext::Argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ArgumentContext *> modelicaParser::Argument_listContext::argument() {
  return getRuleContexts<modelicaParser::ArgumentContext>();
}

modelicaParser::ArgumentContext* modelicaParser::Argument_listContext::argument(size_t i) {
  return getRuleContext<modelicaParser::ArgumentContext>(i);
}


size_t modelicaParser::Argument_listContext::getRuleIndex() const {
  return modelicaParser::RuleArgument_list;
}

void modelicaParser::Argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_list(this);
}

void modelicaParser::Argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_list(this);
}


std::any modelicaParser::Argument_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitArgument_list(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Argument_listContext* modelicaParser::argument_list() {
  Argument_listContext *_localctx = _tracker.createInstance<Argument_listContext>(_ctx, getState());
  enterRule(_localctx, 58, modelicaParser::RuleArgument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(475);
    argument();
    setState(480);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(476);
      match(modelicaParser::T__25);
      setState(477);
      argument();
      setState(482);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

modelicaParser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Element_modification_or_replaceableContext* modelicaParser::ArgumentContext::element_modification_or_replaceable() {
  return getRuleContext<modelicaParser::Element_modification_or_replaceableContext>(0);
}

modelicaParser::Element_redeclarationContext* modelicaParser::ArgumentContext::element_redeclaration() {
  return getRuleContext<modelicaParser::Element_redeclarationContext>(0);
}


size_t modelicaParser::ArgumentContext::getRuleIndex() const {
  return modelicaParser::RuleArgument;
}

void modelicaParser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void modelicaParser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}


std::any modelicaParser::ArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitArgument(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::ArgumentContext* modelicaParser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 60, modelicaParser::RuleArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(485);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__0:
      case modelicaParser::T__32:
      case modelicaParser::T__47:
      case modelicaParser::T__86:
      case modelicaParser::IDENT: {
        enterOuterAlt(_localctx, 1);
        setState(483);
        element_modification_or_replaceable();
        break;
      }

      case modelicaParser::T__29: {
        enterOuterAlt(_localctx, 2);
        setState(484);
        element_redeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_modification_or_replaceableContext ------------------------------------------------------------------

modelicaParser::Element_modification_or_replaceableContext::Element_modification_or_replaceableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Element_modificationContext* modelicaParser::Element_modification_or_replaceableContext::element_modification() {
  return getRuleContext<modelicaParser::Element_modificationContext>(0);
}

modelicaParser::Element_replaceableContext* modelicaParser::Element_modification_or_replaceableContext::element_replaceable() {
  return getRuleContext<modelicaParser::Element_replaceableContext>(0);
}


size_t modelicaParser::Element_modification_or_replaceableContext::getRuleIndex() const {
  return modelicaParser::RuleElement_modification_or_replaceable;
}

void modelicaParser::Element_modification_or_replaceableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_modification_or_replaceable(this);
}

void modelicaParser::Element_modification_or_replaceableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_modification_or_replaceable(this);
}


std::any modelicaParser::Element_modification_or_replaceableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitElement_modification_or_replaceable(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Element_modification_or_replaceableContext* modelicaParser::element_modification_or_replaceable() {
  Element_modification_or_replaceableContext *_localctx = _tracker.createInstance<Element_modification_or_replaceableContext>(_ctx, getState());
  enterRule(_localctx, 62, modelicaParser::RuleElement_modification_or_replaceable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__47) {
      setState(487);
      match(modelicaParser::T__47);
    }
    setState(491);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__0) {
      setState(490);
      match(modelicaParser::T__0);
    }
    setState(495);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__86:
      case modelicaParser::IDENT: {
        setState(493);
        element_modification();
        break;
      }

      case modelicaParser::T__32: {
        setState(494);
        element_replaceable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_modificationContext ------------------------------------------------------------------

modelicaParser::Element_modificationContext::Element_modificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::NameContext* modelicaParser::Element_modificationContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::String_commentContext* modelicaParser::Element_modificationContext::string_comment() {
  return getRuleContext<modelicaParser::String_commentContext>(0);
}

modelicaParser::ModificationContext* modelicaParser::Element_modificationContext::modification() {
  return getRuleContext<modelicaParser::ModificationContext>(0);
}


size_t modelicaParser::Element_modificationContext::getRuleIndex() const {
  return modelicaParser::RuleElement_modification;
}

void modelicaParser::Element_modificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_modification(this);
}

void modelicaParser::Element_modificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_modification(this);
}


std::any modelicaParser::Element_modificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitElement_modification(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Element_modificationContext* modelicaParser::element_modification() {
  Element_modificationContext *_localctx = _tracker.createInstance<Element_modificationContext>(_ctx, getState());
  enterRule(_localctx, 64, modelicaParser::RuleElement_modification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    name();
    setState(499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140737493598208) != 0)) {
      setState(498);
      modification();
    }
    setState(501);
    string_comment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_redeclarationContext ------------------------------------------------------------------

modelicaParser::Element_redeclarationContext::Element_redeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Element_replaceableContext* modelicaParser::Element_redeclarationContext::element_replaceable() {
  return getRuleContext<modelicaParser::Element_replaceableContext>(0);
}

modelicaParser::Short_class_definitionContext* modelicaParser::Element_redeclarationContext::short_class_definition() {
  return getRuleContext<modelicaParser::Short_class_definitionContext>(0);
}

modelicaParser::Component_clause1Context* modelicaParser::Element_redeclarationContext::component_clause1() {
  return getRuleContext<modelicaParser::Component_clause1Context>(0);
}


size_t modelicaParser::Element_redeclarationContext::getRuleIndex() const {
  return modelicaParser::RuleElement_redeclaration;
}

void modelicaParser::Element_redeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_redeclaration(this);
}

void modelicaParser::Element_redeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_redeclaration(this);
}


std::any modelicaParser::Element_redeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitElement_redeclaration(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Element_redeclarationContext* modelicaParser::element_redeclaration() {
  Element_redeclarationContext *_localctx = _tracker.createInstance<Element_redeclarationContext>(_ctx, getState());
  enterRule(_localctx, 66, modelicaParser::RuleElement_redeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(503);
    match(modelicaParser::T__29);
    setState(505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__47) {
      setState(504);
      match(modelicaParser::T__47);
    }
    setState(508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__0) {
      setState(507);
      match(modelicaParser::T__0);
    }
    setState(515);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__4:
      case modelicaParser::T__5:
      case modelicaParser::T__6:
      case modelicaParser::T__7:
      case modelicaParser::T__8:
      case modelicaParser::T__9:
      case modelicaParser::T__10:
      case modelicaParser::T__11:
      case modelicaParser::T__12:
      case modelicaParser::T__13:
      case modelicaParser::T__14:
      case modelicaParser::T__15:
      case modelicaParser::T__16:
      case modelicaParser::T__38:
      case modelicaParser::T__39:
      case modelicaParser::T__40:
      case modelicaParser::T__41:
      case modelicaParser::T__42:
      case modelicaParser::T__43:
      case modelicaParser::T__44:
      case modelicaParser::T__86:
      case modelicaParser::IDENT: {
        setState(512);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case modelicaParser::T__4:
          case modelicaParser::T__5:
          case modelicaParser::T__6:
          case modelicaParser::T__7:
          case modelicaParser::T__8:
          case modelicaParser::T__9:
          case modelicaParser::T__10:
          case modelicaParser::T__11:
          case modelicaParser::T__12:
          case modelicaParser::T__13:
          case modelicaParser::T__14:
          case modelicaParser::T__15:
          case modelicaParser::T__16: {
            setState(510);
            short_class_definition();
            break;
          }

          case modelicaParser::T__38:
          case modelicaParser::T__39:
          case modelicaParser::T__40:
          case modelicaParser::T__41:
          case modelicaParser::T__42:
          case modelicaParser::T__43:
          case modelicaParser::T__44:
          case modelicaParser::T__86:
          case modelicaParser::IDENT: {
            setState(511);
            component_clause1();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case modelicaParser::T__32: {
        setState(514);
        element_replaceable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_replaceableContext ------------------------------------------------------------------

modelicaParser::Element_replaceableContext::Element_replaceableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Short_class_definitionContext* modelicaParser::Element_replaceableContext::short_class_definition() {
  return getRuleContext<modelicaParser::Short_class_definitionContext>(0);
}

modelicaParser::Component_clause1Context* modelicaParser::Element_replaceableContext::component_clause1() {
  return getRuleContext<modelicaParser::Component_clause1Context>(0);
}

modelicaParser::Constraining_clauseContext* modelicaParser::Element_replaceableContext::constraining_clause() {
  return getRuleContext<modelicaParser::Constraining_clauseContext>(0);
}


size_t modelicaParser::Element_replaceableContext::getRuleIndex() const {
  return modelicaParser::RuleElement_replaceable;
}

void modelicaParser::Element_replaceableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_replaceable(this);
}

void modelicaParser::Element_replaceableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_replaceable(this);
}


std::any modelicaParser::Element_replaceableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitElement_replaceable(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Element_replaceableContext* modelicaParser::element_replaceable() {
  Element_replaceableContext *_localctx = _tracker.createInstance<Element_replaceableContext>(_ctx, getState());
  enterRule(_localctx, 68, modelicaParser::RuleElement_replaceable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(modelicaParser::T__32);
    setState(520);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__4:
      case modelicaParser::T__5:
      case modelicaParser::T__6:
      case modelicaParser::T__7:
      case modelicaParser::T__8:
      case modelicaParser::T__9:
      case modelicaParser::T__10:
      case modelicaParser::T__11:
      case modelicaParser::T__12:
      case modelicaParser::T__13:
      case modelicaParser::T__14:
      case modelicaParser::T__15:
      case modelicaParser::T__16: {
        setState(518);
        short_class_definition();
        break;
      }

      case modelicaParser::T__38:
      case modelicaParser::T__39:
      case modelicaParser::T__40:
      case modelicaParser::T__41:
      case modelicaParser::T__42:
      case modelicaParser::T__43:
      case modelicaParser::T__44:
      case modelicaParser::T__86:
      case modelicaParser::IDENT: {
        setState(519);
        component_clause1();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(523);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__37) {
      setState(522);
      constraining_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_clause1Context ------------------------------------------------------------------

modelicaParser::Component_clause1Context::Component_clause1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Type_prefixContext* modelicaParser::Component_clause1Context::type_prefix() {
  return getRuleContext<modelicaParser::Type_prefixContext>(0);
}

modelicaParser::Type_specifierContext* modelicaParser::Component_clause1Context::type_specifier() {
  return getRuleContext<modelicaParser::Type_specifierContext>(0);
}

modelicaParser::Component_declaration1Context* modelicaParser::Component_clause1Context::component_declaration1() {
  return getRuleContext<modelicaParser::Component_declaration1Context>(0);
}


size_t modelicaParser::Component_clause1Context::getRuleIndex() const {
  return modelicaParser::RuleComponent_clause1;
}

void modelicaParser::Component_clause1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_clause1(this);
}

void modelicaParser::Component_clause1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_clause1(this);
}


std::any modelicaParser::Component_clause1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComponent_clause1(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Component_clause1Context* modelicaParser::component_clause1() {
  Component_clause1Context *_localctx = _tracker.createInstance<Component_clause1Context>(_ctx, getState());
  enterRule(_localctx, 70, modelicaParser::RuleComponent_clause1);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(525);
    type_prefix();
    setState(526);
    type_specifier();
    setState(527);
    component_declaration1();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_declaration1Context ------------------------------------------------------------------

modelicaParser::Component_declaration1Context::Component_declaration1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::DeclarationContext* modelicaParser::Component_declaration1Context::declaration() {
  return getRuleContext<modelicaParser::DeclarationContext>(0);
}

modelicaParser::CommentContext* modelicaParser::Component_declaration1Context::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}


size_t modelicaParser::Component_declaration1Context::getRuleIndex() const {
  return modelicaParser::RuleComponent_declaration1;
}

void modelicaParser::Component_declaration1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_declaration1(this);
}

void modelicaParser::Component_declaration1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_declaration1(this);
}


std::any modelicaParser::Component_declaration1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComponent_declaration1(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Component_declaration1Context* modelicaParser::component_declaration1() {
  Component_declaration1Context *_localctx = _tracker.createInstance<Component_declaration1Context>(_ctx, getState());
  enterRule(_localctx, 72, modelicaParser::RuleComponent_declaration1);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(529);
    declaration();
    setState(530);
    comment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Short_class_definitionContext ------------------------------------------------------------------

modelicaParser::Short_class_definitionContext::Short_class_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Class_prefixesContext* modelicaParser::Short_class_definitionContext::class_prefixes() {
  return getRuleContext<modelicaParser::Class_prefixesContext>(0);
}

modelicaParser::Short_class_specifierContext* modelicaParser::Short_class_definitionContext::short_class_specifier() {
  return getRuleContext<modelicaParser::Short_class_specifierContext>(0);
}


size_t modelicaParser::Short_class_definitionContext::getRuleIndex() const {
  return modelicaParser::RuleShort_class_definition;
}

void modelicaParser::Short_class_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShort_class_definition(this);
}

void modelicaParser::Short_class_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShort_class_definition(this);
}


std::any modelicaParser::Short_class_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitShort_class_definition(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Short_class_definitionContext* modelicaParser::short_class_definition() {
  Short_class_definitionContext *_localctx = _tracker.createInstance<Short_class_definitionContext>(_ctx, getState());
  enterRule(_localctx, 74, modelicaParser::RuleShort_class_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(532);
    class_prefixes();
    setState(533);
    short_class_specifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Equation_sectionContext ------------------------------------------------------------------

modelicaParser::Equation_sectionContext::Equation_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::EquationContext *> modelicaParser::Equation_sectionContext::equation() {
  return getRuleContexts<modelicaParser::EquationContext>();
}

modelicaParser::EquationContext* modelicaParser::Equation_sectionContext::equation(size_t i) {
  return getRuleContext<modelicaParser::EquationContext>(i);
}


size_t modelicaParser::Equation_sectionContext::getRuleIndex() const {
  return modelicaParser::RuleEquation_section;
}

void modelicaParser::Equation_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquation_section(this);
}

void modelicaParser::Equation_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquation_section(this);
}


std::any modelicaParser::Equation_sectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitEquation_section(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Equation_sectionContext* modelicaParser::equation_section() {
  Equation_sectionContext *_localctx = _tracker.createInstance<Equation_sectionContext>(_ctx, getState());
  enterRule(_localctx, 76, modelicaParser::RuleEquation_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(536);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__48) {
      setState(535);
      match(modelicaParser::T__48);
    }
    setState(538);
    match(modelicaParser::T__49);
    setState(542);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(539);
        equation(); 
      }
      setState(544);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Algorithm_sectionContext ------------------------------------------------------------------

modelicaParser::Algorithm_sectionContext::Algorithm_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::StatementContext *> modelicaParser::Algorithm_sectionContext::statement() {
  return getRuleContexts<modelicaParser::StatementContext>();
}

modelicaParser::StatementContext* modelicaParser::Algorithm_sectionContext::statement(size_t i) {
  return getRuleContext<modelicaParser::StatementContext>(i);
}


size_t modelicaParser::Algorithm_sectionContext::getRuleIndex() const {
  return modelicaParser::RuleAlgorithm_section;
}

void modelicaParser::Algorithm_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlgorithm_section(this);
}

void modelicaParser::Algorithm_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlgorithm_section(this);
}


std::any modelicaParser::Algorithm_sectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitAlgorithm_section(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Algorithm_sectionContext* modelicaParser::algorithm_section() {
  Algorithm_sectionContext *_localctx = _tracker.createInstance<Algorithm_sectionContext>(_ctx, getState());
  enterRule(_localctx, 78, modelicaParser::RuleAlgorithm_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__48) {
      setState(545);
      match(modelicaParser::T__48);
    }
    setState(548);
    match(modelicaParser::T__50);
    setState(554);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(549);
      statement();
      setState(550);
      match(modelicaParser::T__1);
      setState(556);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EquationContext ------------------------------------------------------------------

modelicaParser::EquationContext::EquationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::CommentContext* modelicaParser::EquationContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}

modelicaParser::Simple_expressionContext* modelicaParser::EquationContext::simple_expression() {
  return getRuleContext<modelicaParser::Simple_expressionContext>(0);
}

modelicaParser::ExpressionContext* modelicaParser::EquationContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}

modelicaParser::If_equationContext* modelicaParser::EquationContext::if_equation() {
  return getRuleContext<modelicaParser::If_equationContext>(0);
}

modelicaParser::For_equationContext* modelicaParser::EquationContext::for_equation() {
  return getRuleContext<modelicaParser::For_equationContext>(0);
}

modelicaParser::Connect_clauseContext* modelicaParser::EquationContext::connect_clause() {
  return getRuleContext<modelicaParser::Connect_clauseContext>(0);
}

modelicaParser::When_equationContext* modelicaParser::EquationContext::when_equation() {
  return getRuleContext<modelicaParser::When_equationContext>(0);
}

modelicaParser::NameContext* modelicaParser::EquationContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::Function_call_argsContext* modelicaParser::EquationContext::function_call_args() {
  return getRuleContext<modelicaParser::Function_call_argsContext>(0);
}


size_t modelicaParser::EquationContext::getRuleIndex() const {
  return modelicaParser::RuleEquation;
}

void modelicaParser::EquationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquation(this);
}

void modelicaParser::EquationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquation(this);
}


std::any modelicaParser::EquationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitEquation(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::EquationContext* modelicaParser::equation() {
  EquationContext *_localctx = _tracker.createInstance<EquationContext>(_ctx, getState());
  enterRule(_localctx, 80, modelicaParser::RuleEquation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(568);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      setState(557);
      simple_expression();
      setState(558);
      match(modelicaParser::T__19);
      setState(559);
      expression();
      break;
    }

    case 2: {
      setState(561);
      if_equation();
      break;
    }

    case 3: {
      setState(562);
      for_equation();
      break;
    }

    case 4: {
      setState(563);
      connect_clause();
      break;
    }

    case 5: {
      setState(564);
      when_equation();
      break;
    }

    case 6: {
      setState(565);
      name();
      setState(566);
      function_call_args();
      break;
    }

    default:
      break;
    }
    setState(570);
    comment();
    setState(571);
    match(modelicaParser::T__1);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

modelicaParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::CommentContext* modelicaParser::StatementContext::comment() {
  return getRuleContext<modelicaParser::CommentContext>(0);
}

modelicaParser::Component_referenceContext* modelicaParser::StatementContext::component_reference() {
  return getRuleContext<modelicaParser::Component_referenceContext>(0);
}

modelicaParser::Output_expression_listContext* modelicaParser::StatementContext::output_expression_list() {
  return getRuleContext<modelicaParser::Output_expression_listContext>(0);
}

modelicaParser::Function_call_argsContext* modelicaParser::StatementContext::function_call_args() {
  return getRuleContext<modelicaParser::Function_call_argsContext>(0);
}

modelicaParser::If_statementContext* modelicaParser::StatementContext::if_statement() {
  return getRuleContext<modelicaParser::If_statementContext>(0);
}

modelicaParser::For_statementContext* modelicaParser::StatementContext::for_statement() {
  return getRuleContext<modelicaParser::For_statementContext>(0);
}

modelicaParser::While_statementContext* modelicaParser::StatementContext::while_statement() {
  return getRuleContext<modelicaParser::While_statementContext>(0);
}

modelicaParser::When_statementContext* modelicaParser::StatementContext::when_statement() {
  return getRuleContext<modelicaParser::When_statementContext>(0);
}

modelicaParser::ExpressionContext* modelicaParser::StatementContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}


size_t modelicaParser::StatementContext::getRuleIndex() const {
  return modelicaParser::RuleStatement;
}

void modelicaParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void modelicaParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}


std::any modelicaParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::StatementContext* modelicaParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 82, modelicaParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__86:
      case modelicaParser::IDENT: {
        setState(573);
        component_reference();
        setState(577);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case modelicaParser::T__46: {
            setState(574);
            match(modelicaParser::T__46);
            setState(575);
            expression();
            break;
          }

          case modelicaParser::T__21: {
            setState(576);
            function_call_args();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case modelicaParser::T__21: {
        setState(579);
        match(modelicaParser::T__21);
        setState(580);
        output_expression_list();
        setState(581);
        match(modelicaParser::T__23);
        setState(582);
        match(modelicaParser::T__46);
        setState(583);
        component_reference();
        setState(584);
        function_call_args();
        break;
      }

      case modelicaParser::T__51: {
        setState(586);
        match(modelicaParser::T__51);
        break;
      }

      case modelicaParser::T__52: {
        setState(587);
        match(modelicaParser::T__52);
        break;
      }

      case modelicaParser::T__45: {
        setState(588);
        if_statement();
        break;
      }

      case modelicaParser::T__56: {
        setState(589);
        for_statement();
        break;
      }

      case modelicaParser::T__59: {
        setState(590);
        while_statement();
        break;
      }

      case modelicaParser::T__60: {
        setState(591);
        when_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(594);
    comment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_equationContext ------------------------------------------------------------------

modelicaParser::If_equationContext::If_equationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ExpressionContext *> modelicaParser::If_equationContext::expression() {
  return getRuleContexts<modelicaParser::ExpressionContext>();
}

modelicaParser::ExpressionContext* modelicaParser::If_equationContext::expression(size_t i) {
  return getRuleContext<modelicaParser::ExpressionContext>(i);
}

std::vector<modelicaParser::EquationContext *> modelicaParser::If_equationContext::equation() {
  return getRuleContexts<modelicaParser::EquationContext>();
}

modelicaParser::EquationContext* modelicaParser::If_equationContext::equation(size_t i) {
  return getRuleContext<modelicaParser::EquationContext>(i);
}


size_t modelicaParser::If_equationContext::getRuleIndex() const {
  return modelicaParser::RuleIf_equation;
}

void modelicaParser::If_equationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_equation(this);
}

void modelicaParser::If_equationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_equation(this);
}


std::any modelicaParser::If_equationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitIf_equation(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::If_equationContext* modelicaParser::if_equation() {
  If_equationContext *_localctx = _tracker.createInstance<If_equationContext>(_ctx, getState());
  enterRule(_localctx, 84, modelicaParser::RuleIf_equation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(modelicaParser::T__45);
    setState(597);
    expression();
    setState(598);
    match(modelicaParser::T__53);
    setState(602);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(599);
        equation(); 
      }
      setState(604);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
    setState(616);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__54) {
      setState(605);
      match(modelicaParser::T__54);
      setState(606);
      expression();
      setState(607);
      match(modelicaParser::T__53);
      setState(611);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(608);
          equation(); 
        }
        setState(613);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
      }
      setState(618);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(626);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__55) {
      setState(619);
      match(modelicaParser::T__55);
      setState(623);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(620);
          equation(); 
        }
        setState(625);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
      }
    }
    setState(628);
    match(modelicaParser::T__17);
    setState(629);
    match(modelicaParser::T__45);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_statementContext ------------------------------------------------------------------

modelicaParser::If_statementContext::If_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ExpressionContext *> modelicaParser::If_statementContext::expression() {
  return getRuleContexts<modelicaParser::ExpressionContext>();
}

modelicaParser::ExpressionContext* modelicaParser::If_statementContext::expression(size_t i) {
  return getRuleContext<modelicaParser::ExpressionContext>(i);
}

std::vector<modelicaParser::StatementContext *> modelicaParser::If_statementContext::statement() {
  return getRuleContexts<modelicaParser::StatementContext>();
}

modelicaParser::StatementContext* modelicaParser::If_statementContext::statement(size_t i) {
  return getRuleContext<modelicaParser::StatementContext>(i);
}


size_t modelicaParser::If_statementContext::getRuleIndex() const {
  return modelicaParser::RuleIf_statement;
}

void modelicaParser::If_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_statement(this);
}

void modelicaParser::If_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_statement(this);
}


std::any modelicaParser::If_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitIf_statement(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::If_statementContext* modelicaParser::if_statement() {
  If_statementContext *_localctx = _tracker.createInstance<If_statementContext>(_ctx, getState());
  enterRule(_localctx, 86, modelicaParser::RuleIf_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(631);
    match(modelicaParser::T__45);
    setState(632);
    expression();
    setState(633);
    match(modelicaParser::T__53);
    setState(639);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(634);
      statement();
      setState(635);
      match(modelicaParser::T__1);
      setState(641);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(655);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__54) {
      setState(642);
      match(modelicaParser::T__54);
      setState(643);
      expression();
      setState(644);
      match(modelicaParser::T__53);
      setState(650);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

      || _la == modelicaParser::IDENT) {
        setState(645);
        statement();
        setState(646);
        match(modelicaParser::T__1);
        setState(652);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(657);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__55) {
      setState(658);
      match(modelicaParser::T__55);
      setState(664);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

      || _la == modelicaParser::IDENT) {
        setState(659);
        statement();
        setState(660);
        match(modelicaParser::T__1);
        setState(666);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(669);
    match(modelicaParser::T__17);
    setState(670);
    match(modelicaParser::T__45);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_equationContext ------------------------------------------------------------------

modelicaParser::For_equationContext::For_equationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::For_indicesContext* modelicaParser::For_equationContext::for_indices() {
  return getRuleContext<modelicaParser::For_indicesContext>(0);
}

std::vector<modelicaParser::EquationContext *> modelicaParser::For_equationContext::equation() {
  return getRuleContexts<modelicaParser::EquationContext>();
}

modelicaParser::EquationContext* modelicaParser::For_equationContext::equation(size_t i) {
  return getRuleContext<modelicaParser::EquationContext>(i);
}


size_t modelicaParser::For_equationContext::getRuleIndex() const {
  return modelicaParser::RuleFor_equation;
}

void modelicaParser::For_equationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_equation(this);
}

void modelicaParser::For_equationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_equation(this);
}


std::any modelicaParser::For_equationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFor_equation(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::For_equationContext* modelicaParser::for_equation() {
  For_equationContext *_localctx = _tracker.createInstance<For_equationContext>(_ctx, getState());
  enterRule(_localctx, 88, modelicaParser::RuleFor_equation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(672);
    match(modelicaParser::T__56);
    setState(673);
    for_indices();
    setState(674);
    match(modelicaParser::T__57);
    setState(678);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(675);
        equation(); 
      }
      setState(680);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    }
    setState(681);
    match(modelicaParser::T__17);
    setState(682);
    match(modelicaParser::T__56);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_statementContext ------------------------------------------------------------------

modelicaParser::For_statementContext::For_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::For_indicesContext* modelicaParser::For_statementContext::for_indices() {
  return getRuleContext<modelicaParser::For_indicesContext>(0);
}

std::vector<modelicaParser::StatementContext *> modelicaParser::For_statementContext::statement() {
  return getRuleContexts<modelicaParser::StatementContext>();
}

modelicaParser::StatementContext* modelicaParser::For_statementContext::statement(size_t i) {
  return getRuleContext<modelicaParser::StatementContext>(i);
}


size_t modelicaParser::For_statementContext::getRuleIndex() const {
  return modelicaParser::RuleFor_statement;
}

void modelicaParser::For_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_statement(this);
}

void modelicaParser::For_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_statement(this);
}


std::any modelicaParser::For_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFor_statement(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::For_statementContext* modelicaParser::for_statement() {
  For_statementContext *_localctx = _tracker.createInstance<For_statementContext>(_ctx, getState());
  enterRule(_localctx, 90, modelicaParser::RuleFor_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(684);
    match(modelicaParser::T__56);
    setState(685);
    for_indices();
    setState(686);
    match(modelicaParser::T__57);
    setState(692);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(687);
      statement();
      setState(688);
      match(modelicaParser::T__1);
      setState(694);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(695);
    match(modelicaParser::T__17);
    setState(696);
    match(modelicaParser::T__56);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_indicesContext ------------------------------------------------------------------

modelicaParser::For_indicesContext::For_indicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::For_indexContext *> modelicaParser::For_indicesContext::for_index() {
  return getRuleContexts<modelicaParser::For_indexContext>();
}

modelicaParser::For_indexContext* modelicaParser::For_indicesContext::for_index(size_t i) {
  return getRuleContext<modelicaParser::For_indexContext>(i);
}


size_t modelicaParser::For_indicesContext::getRuleIndex() const {
  return modelicaParser::RuleFor_indices;
}

void modelicaParser::For_indicesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_indices(this);
}

void modelicaParser::For_indicesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_indices(this);
}


std::any modelicaParser::For_indicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFor_indices(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::For_indicesContext* modelicaParser::for_indices() {
  For_indicesContext *_localctx = _tracker.createInstance<For_indicesContext>(_ctx, getState());
  enterRule(_localctx, 92, modelicaParser::RuleFor_indices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698);
    for_index();
    setState(703);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(699);
      match(modelicaParser::T__25);
      setState(700);
      for_index();
      setState(705);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_indexContext ------------------------------------------------------------------

modelicaParser::For_indexContext::For_indexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::For_indexContext::IDENT() {
  return getToken(modelicaParser::IDENT, 0);
}

modelicaParser::ExpressionContext* modelicaParser::For_indexContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}


size_t modelicaParser::For_indexContext::getRuleIndex() const {
  return modelicaParser::RuleFor_index;
}

void modelicaParser::For_indexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_index(this);
}

void modelicaParser::For_indexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_index(this);
}


std::any modelicaParser::For_indexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFor_index(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::For_indexContext* modelicaParser::for_index() {
  For_indexContext *_localctx = _tracker.createInstance<For_indexContext>(_ctx, getState());
  enterRule(_localctx, 94, modelicaParser::RuleFor_index);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(706);
    match(modelicaParser::IDENT);
    setState(709);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__58) {
      setState(707);
      match(modelicaParser::T__58);
      setState(708);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_statementContext ------------------------------------------------------------------

modelicaParser::While_statementContext::While_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::ExpressionContext* modelicaParser::While_statementContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}

std::vector<modelicaParser::StatementContext *> modelicaParser::While_statementContext::statement() {
  return getRuleContexts<modelicaParser::StatementContext>();
}

modelicaParser::StatementContext* modelicaParser::While_statementContext::statement(size_t i) {
  return getRuleContext<modelicaParser::StatementContext>(i);
}


size_t modelicaParser::While_statementContext::getRuleIndex() const {
  return modelicaParser::RuleWhile_statement;
}

void modelicaParser::While_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_statement(this);
}

void modelicaParser::While_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_statement(this);
}


std::any modelicaParser::While_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitWhile_statement(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::While_statementContext* modelicaParser::while_statement() {
  While_statementContext *_localctx = _tracker.createInstance<While_statementContext>(_ctx, getState());
  enterRule(_localctx, 96, modelicaParser::RuleWhile_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(711);
    match(modelicaParser::T__59);
    setState(712);
    expression();
    setState(713);
    match(modelicaParser::T__57);
    setState(719);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(714);
      statement();
      setState(715);
      match(modelicaParser::T__1);
      setState(721);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(722);
    match(modelicaParser::T__17);
    setState(723);
    match(modelicaParser::T__59);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_equationContext ------------------------------------------------------------------

modelicaParser::When_equationContext::When_equationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ExpressionContext *> modelicaParser::When_equationContext::expression() {
  return getRuleContexts<modelicaParser::ExpressionContext>();
}

modelicaParser::ExpressionContext* modelicaParser::When_equationContext::expression(size_t i) {
  return getRuleContext<modelicaParser::ExpressionContext>(i);
}

std::vector<modelicaParser::EquationContext *> modelicaParser::When_equationContext::equation() {
  return getRuleContexts<modelicaParser::EquationContext>();
}

modelicaParser::EquationContext* modelicaParser::When_equationContext::equation(size_t i) {
  return getRuleContext<modelicaParser::EquationContext>(i);
}


size_t modelicaParser::When_equationContext::getRuleIndex() const {
  return modelicaParser::RuleWhen_equation;
}

void modelicaParser::When_equationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_equation(this);
}

void modelicaParser::When_equationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_equation(this);
}


std::any modelicaParser::When_equationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitWhen_equation(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::When_equationContext* modelicaParser::when_equation() {
  When_equationContext *_localctx = _tracker.createInstance<When_equationContext>(_ctx, getState());
  enterRule(_localctx, 98, modelicaParser::RuleWhen_equation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(725);
    match(modelicaParser::T__60);
    setState(726);
    expression();
    setState(727);
    match(modelicaParser::T__53);
    setState(731);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(728);
        equation(); 
      }
      setState(733);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    }
    setState(745);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__61) {
      setState(734);
      match(modelicaParser::T__61);
      setState(735);
      expression();
      setState(736);
      match(modelicaParser::T__53);
      setState(740);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(737);
          equation(); 
        }
        setState(742);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      }
      setState(747);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(748);
    match(modelicaParser::T__17);
    setState(749);
    match(modelicaParser::T__60);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_statementContext ------------------------------------------------------------------

modelicaParser::When_statementContext::When_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ExpressionContext *> modelicaParser::When_statementContext::expression() {
  return getRuleContexts<modelicaParser::ExpressionContext>();
}

modelicaParser::ExpressionContext* modelicaParser::When_statementContext::expression(size_t i) {
  return getRuleContext<modelicaParser::ExpressionContext>(i);
}

std::vector<modelicaParser::StatementContext *> modelicaParser::When_statementContext::statement() {
  return getRuleContexts<modelicaParser::StatementContext>();
}

modelicaParser::StatementContext* modelicaParser::When_statementContext::statement(size_t i) {
  return getRuleContext<modelicaParser::StatementContext>(i);
}


size_t modelicaParser::When_statementContext::getRuleIndex() const {
  return modelicaParser::RuleWhen_statement;
}

void modelicaParser::When_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_statement(this);
}

void modelicaParser::When_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_statement(this);
}


std::any modelicaParser::When_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitWhen_statement(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::When_statementContext* modelicaParser::when_statement() {
  When_statementContext *_localctx = _tracker.createInstance<When_statementContext>(_ctx, getState());
  enterRule(_localctx, 100, modelicaParser::RuleWhen_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(751);
    match(modelicaParser::T__60);
    setState(752);
    expression();
    setState(753);
    match(modelicaParser::T__53);
    setState(759);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

    || _la == modelicaParser::IDENT) {
      setState(754);
      statement();
      setState(755);
      match(modelicaParser::T__1);
      setState(761);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(775);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__61) {
      setState(762);
      match(modelicaParser::T__61);
      setState(763);
      expression();
      setState(764);
      match(modelicaParser::T__53);
      setState(770);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3616460869526880256) != 0) || _la == modelicaParser::T__86

      || _la == modelicaParser::IDENT) {
        setState(765);
        statement();
        setState(766);
        match(modelicaParser::T__1);
        setState(772);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(777);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(778);
    match(modelicaParser::T__17);
    setState(779);
    match(modelicaParser::T__60);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connect_clauseContext ------------------------------------------------------------------

modelicaParser::Connect_clauseContext::Connect_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Component_referenceContext *> modelicaParser::Connect_clauseContext::component_reference() {
  return getRuleContexts<modelicaParser::Component_referenceContext>();
}

modelicaParser::Component_referenceContext* modelicaParser::Connect_clauseContext::component_reference(size_t i) {
  return getRuleContext<modelicaParser::Component_referenceContext>(i);
}


size_t modelicaParser::Connect_clauseContext::getRuleIndex() const {
  return modelicaParser::RuleConnect_clause;
}

void modelicaParser::Connect_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnect_clause(this);
}

void modelicaParser::Connect_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnect_clause(this);
}


std::any modelicaParser::Connect_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitConnect_clause(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Connect_clauseContext* modelicaParser::connect_clause() {
  Connect_clauseContext *_localctx = _tracker.createInstance<Connect_clauseContext>(_ctx, getState());
  enterRule(_localctx, 102, modelicaParser::RuleConnect_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(781);
    match(modelicaParser::T__62);
    setState(782);
    match(modelicaParser::T__21);
    setState(783);
    component_reference();
    setState(784);
    match(modelicaParser::T__25);
    setState(785);
    component_reference();
    setState(786);
    match(modelicaParser::T__23);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

modelicaParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Simple_expressionContext* modelicaParser::ExpressionContext::simple_expression() {
  return getRuleContext<modelicaParser::Simple_expressionContext>(0);
}

std::vector<modelicaParser::ExpressionContext *> modelicaParser::ExpressionContext::expression() {
  return getRuleContexts<modelicaParser::ExpressionContext>();
}

modelicaParser::ExpressionContext* modelicaParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<modelicaParser::ExpressionContext>(i);
}


size_t modelicaParser::ExpressionContext::getRuleIndex() const {
  return modelicaParser::RuleExpression;
}

void modelicaParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void modelicaParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


std::any modelicaParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::ExpressionContext* modelicaParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, modelicaParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(806);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__17:
      case modelicaParser::T__21:
      case modelicaParser::T__24:
      case modelicaParser::T__48:
      case modelicaParser::T__65:
      case modelicaParser::T__72:
      case modelicaParser::T__73:
      case modelicaParser::T__74:
      case modelicaParser::T__75:
      case modelicaParser::T__81:
      case modelicaParser::T__82:
      case modelicaParser::T__83:
      case modelicaParser::T__85:
      case modelicaParser::T__86:
      case modelicaParser::IDENT:
      case modelicaParser::STRING:
      case modelicaParser::UNSIGNED_NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(788);
        simple_expression();
        break;
      }

      case modelicaParser::T__45: {
        enterOuterAlt(_localctx, 2);
        setState(789);
        match(modelicaParser::T__45);
        setState(790);
        expression();
        setState(791);
        match(modelicaParser::T__53);
        setState(792);
        expression();
        setState(800);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == modelicaParser::T__54) {
          setState(793);
          match(modelicaParser::T__54);
          setState(794);
          expression();
          setState(795);
          match(modelicaParser::T__53);
          setState(796);
          expression();
          setState(802);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(803);
        match(modelicaParser::T__55);
        setState(804);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_expressionContext ------------------------------------------------------------------

modelicaParser::Simple_expressionContext::Simple_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Logical_expressionContext *> modelicaParser::Simple_expressionContext::logical_expression() {
  return getRuleContexts<modelicaParser::Logical_expressionContext>();
}

modelicaParser::Logical_expressionContext* modelicaParser::Simple_expressionContext::logical_expression(size_t i) {
  return getRuleContext<modelicaParser::Logical_expressionContext>(i);
}


size_t modelicaParser::Simple_expressionContext::getRuleIndex() const {
  return modelicaParser::RuleSimple_expression;
}

void modelicaParser::Simple_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_expression(this);
}

void modelicaParser::Simple_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_expression(this);
}


std::any modelicaParser::Simple_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitSimple_expression(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Simple_expressionContext* modelicaParser::simple_expression() {
  Simple_expressionContext *_localctx = _tracker.createInstance<Simple_expressionContext>(_ctx, getState());
  enterRule(_localctx, 106, modelicaParser::RuleSimple_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    logical_expression();
    setState(815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__22) {
      setState(809);
      match(modelicaParser::T__22);
      setState(810);
      logical_expression();
      setState(813);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__22) {
        setState(811);
        match(modelicaParser::T__22);
        setState(812);
        logical_expression();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_expressionContext ------------------------------------------------------------------

modelicaParser::Logical_expressionContext::Logical_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Logical_termContext *> modelicaParser::Logical_expressionContext::logical_term() {
  return getRuleContexts<modelicaParser::Logical_termContext>();
}

modelicaParser::Logical_termContext* modelicaParser::Logical_expressionContext::logical_term(size_t i) {
  return getRuleContext<modelicaParser::Logical_termContext>(i);
}


size_t modelicaParser::Logical_expressionContext::getRuleIndex() const {
  return modelicaParser::RuleLogical_expression;
}

void modelicaParser::Logical_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_expression(this);
}

void modelicaParser::Logical_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_expression(this);
}


std::any modelicaParser::Logical_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitLogical_expression(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Logical_expressionContext* modelicaParser::logical_expression() {
  Logical_expressionContext *_localctx = _tracker.createInstance<Logical_expressionContext>(_ctx, getState());
  enterRule(_localctx, 108, modelicaParser::RuleLogical_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817);
    logical_term();
    setState(822);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__63) {
      setState(818);
      match(modelicaParser::T__63);
      setState(819);
      logical_term();
      setState(824);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_termContext ------------------------------------------------------------------

modelicaParser::Logical_termContext::Logical_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Logical_factorContext *> modelicaParser::Logical_termContext::logical_factor() {
  return getRuleContexts<modelicaParser::Logical_factorContext>();
}

modelicaParser::Logical_factorContext* modelicaParser::Logical_termContext::logical_factor(size_t i) {
  return getRuleContext<modelicaParser::Logical_factorContext>(i);
}


size_t modelicaParser::Logical_termContext::getRuleIndex() const {
  return modelicaParser::RuleLogical_term;
}

void modelicaParser::Logical_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_term(this);
}

void modelicaParser::Logical_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_term(this);
}


std::any modelicaParser::Logical_termContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitLogical_term(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Logical_termContext* modelicaParser::logical_term() {
  Logical_termContext *_localctx = _tracker.createInstance<Logical_termContext>(_ctx, getState());
  enterRule(_localctx, 110, modelicaParser::RuleLogical_term);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(825);
    logical_factor();
    setState(830);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__64) {
      setState(826);
      match(modelicaParser::T__64);
      setState(827);
      logical_factor();
      setState(832);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_factorContext ------------------------------------------------------------------

modelicaParser::Logical_factorContext::Logical_factorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::RelationContext* modelicaParser::Logical_factorContext::relation() {
  return getRuleContext<modelicaParser::RelationContext>(0);
}


size_t modelicaParser::Logical_factorContext::getRuleIndex() const {
  return modelicaParser::RuleLogical_factor;
}

void modelicaParser::Logical_factorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_factor(this);
}

void modelicaParser::Logical_factorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_factor(this);
}


std::any modelicaParser::Logical_factorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitLogical_factor(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Logical_factorContext* modelicaParser::logical_factor() {
  Logical_factorContext *_localctx = _tracker.createInstance<Logical_factorContext>(_ctx, getState());
  enterRule(_localctx, 112, modelicaParser::RuleLogical_factor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__65) {
      setState(833);
      match(modelicaParser::T__65);
    }
    setState(836);
    relation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationContext ------------------------------------------------------------------

modelicaParser::RelationContext::RelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::Arithmetic_expressionContext *> modelicaParser::RelationContext::arithmetic_expression() {
  return getRuleContexts<modelicaParser::Arithmetic_expressionContext>();
}

modelicaParser::Arithmetic_expressionContext* modelicaParser::RelationContext::arithmetic_expression(size_t i) {
  return getRuleContext<modelicaParser::Arithmetic_expressionContext>(i);
}

modelicaParser::Rel_opContext* modelicaParser::RelationContext::rel_op() {
  return getRuleContext<modelicaParser::Rel_opContext>(0);
}


size_t modelicaParser::RelationContext::getRuleIndex() const {
  return modelicaParser::RuleRelation;
}

void modelicaParser::RelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelation(this);
}

void modelicaParser::RelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelation(this);
}


std::any modelicaParser::RelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitRelation(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::RelationContext* modelicaParser::relation() {
  RelationContext *_localctx = _tracker.createInstance<RelationContext>(_ctx, getState());
  enterRule(_localctx, 114, modelicaParser::RuleRelation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(838);
    arithmetic_expression();
    setState(842);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 63) != 0)) {
      setState(839);
      rel_op();
      setState(840);
      arithmetic_expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rel_opContext ------------------------------------------------------------------

modelicaParser::Rel_opContext::Rel_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t modelicaParser::Rel_opContext::getRuleIndex() const {
  return modelicaParser::RuleRel_op;
}

void modelicaParser::Rel_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRel_op(this);
}

void modelicaParser::Rel_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRel_op(this);
}


std::any modelicaParser::Rel_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitRel_op(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Rel_opContext* modelicaParser::rel_op() {
  Rel_opContext *_localctx = _tracker.createInstance<Rel_opContext>(_ctx, getState());
  enterRule(_localctx, 116, modelicaParser::RuleRel_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    _la = _input->LA(1);
    if (!(((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 63) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_expressionContext ------------------------------------------------------------------

modelicaParser::Arithmetic_expressionContext::Arithmetic_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::TermContext *> modelicaParser::Arithmetic_expressionContext::term() {
  return getRuleContexts<modelicaParser::TermContext>();
}

modelicaParser::TermContext* modelicaParser::Arithmetic_expressionContext::term(size_t i) {
  return getRuleContext<modelicaParser::TermContext>(i);
}

std::vector<modelicaParser::Add_opContext *> modelicaParser::Arithmetic_expressionContext::add_op() {
  return getRuleContexts<modelicaParser::Add_opContext>();
}

modelicaParser::Add_opContext* modelicaParser::Arithmetic_expressionContext::add_op(size_t i) {
  return getRuleContext<modelicaParser::Add_opContext>(i);
}


size_t modelicaParser::Arithmetic_expressionContext::getRuleIndex() const {
  return modelicaParser::RuleArithmetic_expression;
}

void modelicaParser::Arithmetic_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_expression(this);
}

void modelicaParser::Arithmetic_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_expression(this);
}


std::any modelicaParser::Arithmetic_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitArithmetic_expression(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Arithmetic_expressionContext* modelicaParser::arithmetic_expression() {
  Arithmetic_expressionContext *_localctx = _tracker.createInstance<Arithmetic_expressionContext>(_ctx, getState());
  enterRule(_localctx, 118, modelicaParser::RuleArithmetic_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 15) != 0)) {
      setState(846);
      add_op();
    }
    setState(849);
    term();
    setState(855);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 15) != 0)) {
      setState(850);
      add_op();
      setState(851);
      term();
      setState(857);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_opContext ------------------------------------------------------------------

modelicaParser::Add_opContext::Add_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t modelicaParser::Add_opContext::getRuleIndex() const {
  return modelicaParser::RuleAdd_op;
}

void modelicaParser::Add_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_op(this);
}

void modelicaParser::Add_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_op(this);
}


std::any modelicaParser::Add_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitAdd_op(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Add_opContext* modelicaParser::add_op() {
  Add_opContext *_localctx = _tracker.createInstance<Add_opContext>(_ctx, getState());
  enterRule(_localctx, 120, modelicaParser::RuleAdd_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(858);
    _la = _input->LA(1);
    if (!(((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

modelicaParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::FactorContext *> modelicaParser::TermContext::factor() {
  return getRuleContexts<modelicaParser::FactorContext>();
}

modelicaParser::FactorContext* modelicaParser::TermContext::factor(size_t i) {
  return getRuleContext<modelicaParser::FactorContext>(i);
}

std::vector<modelicaParser::Mul_opContext *> modelicaParser::TermContext::mul_op() {
  return getRuleContexts<modelicaParser::Mul_opContext>();
}

modelicaParser::Mul_opContext* modelicaParser::TermContext::mul_op(size_t i) {
  return getRuleContext<modelicaParser::Mul_opContext>(i);
}


size_t modelicaParser::TermContext::getRuleIndex() const {
  return modelicaParser::RuleTerm;
}

void modelicaParser::TermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm(this);
}

void modelicaParser::TermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm(this);
}


std::any modelicaParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::TermContext* modelicaParser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 122, modelicaParser::RuleTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(860);
    factor();
    setState(866);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 35) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 35)) & 30786325577729) != 0)) {
      setState(861);
      mul_op();
      setState(862);
      factor();
      setState(868);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mul_opContext ------------------------------------------------------------------

modelicaParser::Mul_opContext::Mul_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t modelicaParser::Mul_opContext::getRuleIndex() const {
  return modelicaParser::RuleMul_op;
}

void modelicaParser::Mul_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMul_op(this);
}

void modelicaParser::Mul_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMul_op(this);
}


std::any modelicaParser::Mul_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitMul_op(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Mul_opContext* modelicaParser::mul_op() {
  Mul_opContext *_localctx = _tracker.createInstance<Mul_opContext>(_ctx, getState());
  enterRule(_localctx, 124, modelicaParser::RuleMul_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    _la = _input->LA(1);
    if (!(((((_la - 35) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 35)) & 30786325577729) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

modelicaParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::PrimaryContext *> modelicaParser::FactorContext::primary() {
  return getRuleContexts<modelicaParser::PrimaryContext>();
}

modelicaParser::PrimaryContext* modelicaParser::FactorContext::primary(size_t i) {
  return getRuleContext<modelicaParser::PrimaryContext>(i);
}


size_t modelicaParser::FactorContext::getRuleIndex() const {
  return modelicaParser::RuleFactor;
}

void modelicaParser::FactorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFactor(this);
}

void modelicaParser::FactorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFactor(this);
}


std::any modelicaParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::FactorContext* modelicaParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 126, modelicaParser::RuleFactor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(871);
    primary();
    setState(874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__79

    || _la == modelicaParser::T__80) {
      setState(872);
      _la = _input->LA(1);
      if (!(_la == modelicaParser::T__79

      || _la == modelicaParser::T__80)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(873);
      primary();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

modelicaParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::PrimaryContext::UNSIGNED_NUMBER() {
  return getToken(modelicaParser::UNSIGNED_NUMBER, 0);
}

tree::TerminalNode* modelicaParser::PrimaryContext::STRING() {
  return getToken(modelicaParser::STRING, 0);
}

modelicaParser::Function_call_argsContext* modelicaParser::PrimaryContext::function_call_args() {
  return getRuleContext<modelicaParser::Function_call_argsContext>(0);
}

modelicaParser::NameContext* modelicaParser::PrimaryContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::Component_referenceContext* modelicaParser::PrimaryContext::component_reference() {
  return getRuleContext<modelicaParser::Component_referenceContext>(0);
}

modelicaParser::Output_expression_listContext* modelicaParser::PrimaryContext::output_expression_list() {
  return getRuleContext<modelicaParser::Output_expression_listContext>(0);
}

std::vector<modelicaParser::Expression_listContext *> modelicaParser::PrimaryContext::expression_list() {
  return getRuleContexts<modelicaParser::Expression_listContext>();
}

modelicaParser::Expression_listContext* modelicaParser::PrimaryContext::expression_list(size_t i) {
  return getRuleContext<modelicaParser::Expression_listContext>(i);
}

modelicaParser::Function_argumentsContext* modelicaParser::PrimaryContext::function_arguments() {
  return getRuleContext<modelicaParser::Function_argumentsContext>(0);
}


size_t modelicaParser::PrimaryContext::getRuleIndex() const {
  return modelicaParser::RulePrimary;
}

void modelicaParser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void modelicaParser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}


std::any modelicaParser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::PrimaryContext* modelicaParser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 128, modelicaParser::RulePrimary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(907);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(876);
      match(modelicaParser::UNSIGNED_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(877);
      match(modelicaParser::STRING);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(878);
      match(modelicaParser::T__81);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(879);
      match(modelicaParser::T__82);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(883);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case modelicaParser::T__86:
        case modelicaParser::IDENT: {
          setState(880);
          name();
          break;
        }

        case modelicaParser::T__24: {
          setState(881);
          match(modelicaParser::T__24);
          break;
        }

        case modelicaParser::T__48: {
          setState(882);
          match(modelicaParser::T__48);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(885);
      function_call_args();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(886);
      component_reference();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(887);
      match(modelicaParser::T__21);
      setState(888);
      output_expression_list();
      setState(889);
      match(modelicaParser::T__23);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(891);
      match(modelicaParser::T__83);
      setState(892);
      expression_list();
      setState(897);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == modelicaParser::T__1) {
        setState(893);
        match(modelicaParser::T__1);
        setState(894);
        expression_list();
        setState(899);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(900);
      match(modelicaParser::T__84);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(902);
      match(modelicaParser::T__85);
      setState(903);
      function_arguments();
      setState(904);
      match(modelicaParser::T__36);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(906);
      match(modelicaParser::T__17);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

modelicaParser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> modelicaParser::NameContext::IDENT() {
  return getTokens(modelicaParser::IDENT);
}

tree::TerminalNode* modelicaParser::NameContext::IDENT(size_t i) {
  return getToken(modelicaParser::IDENT, i);
}


size_t modelicaParser::NameContext::getRuleIndex() const {
  return modelicaParser::RuleName;
}

void modelicaParser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void modelicaParser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}


std::any modelicaParser::NameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitName(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::NameContext* modelicaParser::name() {
  NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, getState());
  enterRule(_localctx, 130, modelicaParser::RuleName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__86) {
      setState(909);
      match(modelicaParser::T__86);
    }
    setState(912);
    match(modelicaParser::IDENT);
    setState(917);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__86) {
      setState(913);
      match(modelicaParser::T__86);
      setState(914);
      match(modelicaParser::IDENT);
      setState(919);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_referenceContext ------------------------------------------------------------------

modelicaParser::Component_referenceContext::Component_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> modelicaParser::Component_referenceContext::IDENT() {
  return getTokens(modelicaParser::IDENT);
}

tree::TerminalNode* modelicaParser::Component_referenceContext::IDENT(size_t i) {
  return getToken(modelicaParser::IDENT, i);
}

std::vector<modelicaParser::Array_subscriptsContext *> modelicaParser::Component_referenceContext::array_subscripts() {
  return getRuleContexts<modelicaParser::Array_subscriptsContext>();
}

modelicaParser::Array_subscriptsContext* modelicaParser::Component_referenceContext::array_subscripts(size_t i) {
  return getRuleContext<modelicaParser::Array_subscriptsContext>(i);
}


size_t modelicaParser::Component_referenceContext::getRuleIndex() const {
  return modelicaParser::RuleComponent_reference;
}

void modelicaParser::Component_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_reference(this);
}

void modelicaParser::Component_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_reference(this);
}


std::any modelicaParser::Component_referenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComponent_reference(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Component_referenceContext* modelicaParser::component_reference() {
  Component_referenceContext *_localctx = _tracker.createInstance<Component_referenceContext>(_ctx, getState());
  enterRule(_localctx, 132, modelicaParser::RuleComponent_reference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(921);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__86) {
      setState(920);
      match(modelicaParser::T__86);
    }
    setState(923);
    match(modelicaParser::IDENT);
    setState(925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__83) {
      setState(924);
      array_subscripts();
    }
    setState(934);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__86) {
      setState(927);
      match(modelicaParser::T__86);
      setState(928);
      match(modelicaParser::IDENT);
      setState(930);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == modelicaParser::T__83) {
        setState(929);
        array_subscripts();
      }
      setState(936);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_call_argsContext ------------------------------------------------------------------

modelicaParser::Function_call_argsContext::Function_call_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Function_argumentsContext* modelicaParser::Function_call_argsContext::function_arguments() {
  return getRuleContext<modelicaParser::Function_argumentsContext>(0);
}


size_t modelicaParser::Function_call_argsContext::getRuleIndex() const {
  return modelicaParser::RuleFunction_call_args;
}

void modelicaParser::Function_call_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_call_args(this);
}

void modelicaParser::Function_call_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_call_args(this);
}


std::any modelicaParser::Function_call_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFunction_call_args(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Function_call_argsContext* modelicaParser::function_call_args() {
  Function_call_argsContext *_localctx = _tracker.createInstance<Function_call_argsContext>(_ctx, getState());
  enterRule(_localctx, 134, modelicaParser::RuleFunction_call_args);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(937);
    match(modelicaParser::T__21);
    setState(939);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 633318735740928) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 62326657) != 0)) {
      setState(938);
      function_arguments();
    }
    setState(941);
    match(modelicaParser::T__23);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_argumentsContext ------------------------------------------------------------------

modelicaParser::Function_argumentsContext::Function_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Function_argumentContext* modelicaParser::Function_argumentsContext::function_argument() {
  return getRuleContext<modelicaParser::Function_argumentContext>(0);
}

modelicaParser::Function_argumentsContext* modelicaParser::Function_argumentsContext::function_arguments() {
  return getRuleContext<modelicaParser::Function_argumentsContext>(0);
}

modelicaParser::For_indicesContext* modelicaParser::Function_argumentsContext::for_indices() {
  return getRuleContext<modelicaParser::For_indicesContext>(0);
}

modelicaParser::Named_argumentsContext* modelicaParser::Function_argumentsContext::named_arguments() {
  return getRuleContext<modelicaParser::Named_argumentsContext>(0);
}


size_t modelicaParser::Function_argumentsContext::getRuleIndex() const {
  return modelicaParser::RuleFunction_arguments;
}

void modelicaParser::Function_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_arguments(this);
}

void modelicaParser::Function_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_arguments(this);
}


std::any modelicaParser::Function_argumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFunction_arguments(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Function_argumentsContext* modelicaParser::function_arguments() {
  Function_argumentsContext *_localctx = _tracker.createInstance<Function_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 136, modelicaParser::RuleFunction_arguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(951);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(943);
      function_argument();
      setState(948);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case modelicaParser::T__25: {
          setState(944);
          match(modelicaParser::T__25);
          setState(945);
          function_arguments();
          break;
        }

        case modelicaParser::T__56: {
          setState(946);
          match(modelicaParser::T__56);
          setState(947);
          for_indices();
          break;
        }

        case modelicaParser::T__23:
        case modelicaParser::T__36: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(950);
      named_arguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argumentsContext ------------------------------------------------------------------

modelicaParser::Named_argumentsContext::Named_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Named_argumentContext* modelicaParser::Named_argumentsContext::named_argument() {
  return getRuleContext<modelicaParser::Named_argumentContext>(0);
}

modelicaParser::Named_argumentsContext* modelicaParser::Named_argumentsContext::named_arguments() {
  return getRuleContext<modelicaParser::Named_argumentsContext>(0);
}


size_t modelicaParser::Named_argumentsContext::getRuleIndex() const {
  return modelicaParser::RuleNamed_arguments;
}

void modelicaParser::Named_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_arguments(this);
}

void modelicaParser::Named_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_arguments(this);
}


std::any modelicaParser::Named_argumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitNamed_arguments(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Named_argumentsContext* modelicaParser::named_arguments() {
  Named_argumentsContext *_localctx = _tracker.createInstance<Named_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 138, modelicaParser::RuleNamed_arguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(953);
    named_argument();
    setState(956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__25) {
      setState(954);
      match(modelicaParser::T__25);
      setState(955);
      named_arguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argumentContext ------------------------------------------------------------------

modelicaParser::Named_argumentContext::Named_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* modelicaParser::Named_argumentContext::IDENT() {
  return getToken(modelicaParser::IDENT, 0);
}

modelicaParser::Function_argumentContext* modelicaParser::Named_argumentContext::function_argument() {
  return getRuleContext<modelicaParser::Function_argumentContext>(0);
}


size_t modelicaParser::Named_argumentContext::getRuleIndex() const {
  return modelicaParser::RuleNamed_argument;
}

void modelicaParser::Named_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument(this);
}

void modelicaParser::Named_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument(this);
}


std::any modelicaParser::Named_argumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitNamed_argument(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Named_argumentContext* modelicaParser::named_argument() {
  Named_argumentContext *_localctx = _tracker.createInstance<Named_argumentContext>(_ctx, getState());
  enterRule(_localctx, 140, modelicaParser::RuleNamed_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(958);
    match(modelicaParser::IDENT);
    setState(959);
    match(modelicaParser::T__19);
    setState(960);
    function_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_argumentContext ------------------------------------------------------------------

modelicaParser::Function_argumentContext::Function_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::NameContext* modelicaParser::Function_argumentContext::name() {
  return getRuleContext<modelicaParser::NameContext>(0);
}

modelicaParser::Named_argumentsContext* modelicaParser::Function_argumentContext::named_arguments() {
  return getRuleContext<modelicaParser::Named_argumentsContext>(0);
}

modelicaParser::ExpressionContext* modelicaParser::Function_argumentContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}


size_t modelicaParser::Function_argumentContext::getRuleIndex() const {
  return modelicaParser::RuleFunction_argument;
}

void modelicaParser::Function_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_argument(this);
}

void modelicaParser::Function_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_argument(this);
}


std::any modelicaParser::Function_argumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitFunction_argument(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Function_argumentContext* modelicaParser::function_argument() {
  Function_argumentContext *_localctx = _tracker.createInstance<Function_argumentContext>(_ctx, getState());
  enterRule(_localctx, 142, modelicaParser::RuleFunction_argument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(971);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__16: {
        enterOuterAlt(_localctx, 1);
        setState(962);
        match(modelicaParser::T__16);
        setState(963);
        name();
        setState(964);
        match(modelicaParser::T__21);
        setState(966);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == modelicaParser::IDENT) {
          setState(965);
          named_arguments();
        }
        setState(968);
        match(modelicaParser::T__23);
        break;
      }

      case modelicaParser::T__17:
      case modelicaParser::T__21:
      case modelicaParser::T__24:
      case modelicaParser::T__45:
      case modelicaParser::T__48:
      case modelicaParser::T__65:
      case modelicaParser::T__72:
      case modelicaParser::T__73:
      case modelicaParser::T__74:
      case modelicaParser::T__75:
      case modelicaParser::T__81:
      case modelicaParser::T__82:
      case modelicaParser::T__83:
      case modelicaParser::T__85:
      case modelicaParser::T__86:
      case modelicaParser::IDENT:
      case modelicaParser::STRING:
      case modelicaParser::UNSIGNED_NUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(970);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Output_expression_listContext ------------------------------------------------------------------

modelicaParser::Output_expression_listContext::Output_expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ExpressionContext *> modelicaParser::Output_expression_listContext::expression() {
  return getRuleContexts<modelicaParser::ExpressionContext>();
}

modelicaParser::ExpressionContext* modelicaParser::Output_expression_listContext::expression(size_t i) {
  return getRuleContext<modelicaParser::ExpressionContext>(i);
}


size_t modelicaParser::Output_expression_listContext::getRuleIndex() const {
  return modelicaParser::RuleOutput_expression_list;
}

void modelicaParser::Output_expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOutput_expression_list(this);
}

void modelicaParser::Output_expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOutput_expression_list(this);
}


std::any modelicaParser::Output_expression_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitOutput_expression_list(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Output_expression_listContext* modelicaParser::output_expression_list() {
  Output_expression_listContext *_localctx = _tracker.createInstance<Output_expression_listContext>(_ctx, getState());
  enterRule(_localctx, 144, modelicaParser::RuleOutput_expression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(974);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 633318735609856) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 62326657) != 0)) {
      setState(973);
      expression();
    }
    setState(982);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(976);
      match(modelicaParser::T__25);
      setState(978);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 633318735609856) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & 62326657) != 0)) {
        setState(977);
        expression();
      }
      setState(984);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_listContext ------------------------------------------------------------------

modelicaParser::Expression_listContext::Expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::ExpressionContext *> modelicaParser::Expression_listContext::expression() {
  return getRuleContexts<modelicaParser::ExpressionContext>();
}

modelicaParser::ExpressionContext* modelicaParser::Expression_listContext::expression(size_t i) {
  return getRuleContext<modelicaParser::ExpressionContext>(i);
}


size_t modelicaParser::Expression_listContext::getRuleIndex() const {
  return modelicaParser::RuleExpression_list;
}

void modelicaParser::Expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_list(this);
}

void modelicaParser::Expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_list(this);
}


std::any modelicaParser::Expression_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitExpression_list(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Expression_listContext* modelicaParser::expression_list() {
  Expression_listContext *_localctx = _tracker.createInstance<Expression_listContext>(_ctx, getState());
  enterRule(_localctx, 146, modelicaParser::RuleExpression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(985);
    expression();
    setState(990);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(986);
      match(modelicaParser::T__25);
      setState(987);
      expression();
      setState(992);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_subscriptsContext ------------------------------------------------------------------

modelicaParser::Array_subscriptsContext::Array_subscriptsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<modelicaParser::SubscriptContext *> modelicaParser::Array_subscriptsContext::subscript() {
  return getRuleContexts<modelicaParser::SubscriptContext>();
}

modelicaParser::SubscriptContext* modelicaParser::Array_subscriptsContext::subscript(size_t i) {
  return getRuleContext<modelicaParser::SubscriptContext>(i);
}


size_t modelicaParser::Array_subscriptsContext::getRuleIndex() const {
  return modelicaParser::RuleArray_subscripts;
}

void modelicaParser::Array_subscriptsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_subscripts(this);
}

void modelicaParser::Array_subscriptsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_subscripts(this);
}


std::any modelicaParser::Array_subscriptsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitArray_subscripts(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Array_subscriptsContext* modelicaParser::array_subscripts() {
  Array_subscriptsContext *_localctx = _tracker.createInstance<Array_subscriptsContext>(_ctx, getState());
  enterRule(_localctx, 148, modelicaParser::RuleArray_subscripts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(993);
    match(modelicaParser::T__83);
    setState(994);
    subscript();
    setState(999);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == modelicaParser::T__25) {
      setState(995);
      match(modelicaParser::T__25);
      setState(996);
      subscript();
      setState(1001);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1002);
    match(modelicaParser::T__84);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptContext ------------------------------------------------------------------

modelicaParser::SubscriptContext::SubscriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::ExpressionContext* modelicaParser::SubscriptContext::expression() {
  return getRuleContext<modelicaParser::ExpressionContext>(0);
}


size_t modelicaParser::SubscriptContext::getRuleIndex() const {
  return modelicaParser::RuleSubscript;
}

void modelicaParser::SubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript(this);
}

void modelicaParser::SubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript(this);
}


std::any modelicaParser::SubscriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitSubscript(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::SubscriptContext* modelicaParser::subscript() {
  SubscriptContext *_localctx = _tracker.createInstance<SubscriptContext>(_ctx, getState());
  enterRule(_localctx, 150, modelicaParser::RuleSubscript);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1006);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case modelicaParser::T__22: {
        enterOuterAlt(_localctx, 1);
        setState(1004);
        match(modelicaParser::T__22);
        break;
      }

      case modelicaParser::T__17:
      case modelicaParser::T__21:
      case modelicaParser::T__24:
      case modelicaParser::T__45:
      case modelicaParser::T__48:
      case modelicaParser::T__65:
      case modelicaParser::T__72:
      case modelicaParser::T__73:
      case modelicaParser::T__74:
      case modelicaParser::T__75:
      case modelicaParser::T__81:
      case modelicaParser::T__82:
      case modelicaParser::T__83:
      case modelicaParser::T__85:
      case modelicaParser::T__86:
      case modelicaParser::IDENT:
      case modelicaParser::STRING:
      case modelicaParser::UNSIGNED_NUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(1005);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentContext ------------------------------------------------------------------

modelicaParser::CommentContext::CommentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::String_commentContext* modelicaParser::CommentContext::string_comment() {
  return getRuleContext<modelicaParser::String_commentContext>(0);
}

modelicaParser::AnnotationContext* modelicaParser::CommentContext::annotation() {
  return getRuleContext<modelicaParser::AnnotationContext>(0);
}


size_t modelicaParser::CommentContext::getRuleIndex() const {
  return modelicaParser::RuleComment;
}

void modelicaParser::CommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment(this);
}

void modelicaParser::CommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment(this);
}


std::any modelicaParser::CommentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitComment(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::CommentContext* modelicaParser::comment() {
  CommentContext *_localctx = _tracker.createInstance<CommentContext>(_ctx, getState());
  enterRule(_localctx, 152, modelicaParser::RuleComment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1008);
    string_comment();
    setState(1010);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::T__87) {
      setState(1009);
      annotation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_commentContext ------------------------------------------------------------------

modelicaParser::String_commentContext::String_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> modelicaParser::String_commentContext::STRING() {
  return getTokens(modelicaParser::STRING);
}

tree::TerminalNode* modelicaParser::String_commentContext::STRING(size_t i) {
  return getToken(modelicaParser::STRING, i);
}


size_t modelicaParser::String_commentContext::getRuleIndex() const {
  return modelicaParser::RuleString_comment;
}

void modelicaParser::String_commentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_comment(this);
}

void modelicaParser::String_commentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_comment(this);
}


std::any modelicaParser::String_commentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitString_comment(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::String_commentContext* modelicaParser::string_comment() {
  String_commentContext *_localctx = _tracker.createInstance<String_commentContext>(_ctx, getState());
  enterRule(_localctx, 154, modelicaParser::RuleString_comment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1020);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == modelicaParser::STRING) {
      setState(1012);
      match(modelicaParser::STRING);
      setState(1017);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == modelicaParser::T__72) {
        setState(1013);
        match(modelicaParser::T__72);
        setState(1014);
        match(modelicaParser::STRING);
        setState(1019);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Model_annotationContext ------------------------------------------------------------------

modelicaParser::Model_annotationContext::Model_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::AnnotationContext* modelicaParser::Model_annotationContext::annotation() {
  return getRuleContext<modelicaParser::AnnotationContext>(0);
}


size_t modelicaParser::Model_annotationContext::getRuleIndex() const {
  return modelicaParser::RuleModel_annotation;
}

void modelicaParser::Model_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModel_annotation(this);
}

void modelicaParser::Model_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModel_annotation(this);
}


std::any modelicaParser::Model_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitModel_annotation(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::Model_annotationContext* modelicaParser::model_annotation() {
  Model_annotationContext *_localctx = _tracker.createInstance<Model_annotationContext>(_ctx, getState());
  enterRule(_localctx, 156, modelicaParser::RuleModel_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

modelicaParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

modelicaParser::Class_modificationContext* modelicaParser::AnnotationContext::class_modification() {
  return getRuleContext<modelicaParser::Class_modificationContext>(0);
}


size_t modelicaParser::AnnotationContext::getRuleIndex() const {
  return modelicaParser::RuleAnnotation;
}

void modelicaParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void modelicaParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<modelicaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}


std::any modelicaParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<modelicaVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

modelicaParser::AnnotationContext* modelicaParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 158, modelicaParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1024);
    match(modelicaParser::T__87);
    setState(1025);
    class_modification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void modelicaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  modelicaParserInitialize();
#else
  ::antlr4::internal::call_once(modelicaParserOnceFlag, modelicaParserInitialize);
#endif
}
