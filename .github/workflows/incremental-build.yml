name: Build and Test (Ubuntu 22.04)

on:
  pull_request:
  push:

jobs:
  build:
    if: contains(github.event.pull_request.labels.*.name, 'Pull Request - Ready for CI')
    runs-on: Linux

    env:
      CONAN_USER_HOME: /home/runner/.conan2
      AWS_REGION: us-west-2
      CONAN_HOST_VOLUME: /srv/data/jenkins/docker-volumes/conan-data
      CONAN_DOCKER_VOLUME: /home/conan-data
      OPENSTUDIO_HOST_VOLUME: /srv/data/jenkins/docker-volumes/ubuntu-2204
      OPENSTUDIO_SOURCE_VOLUME: /home/ubuntu/OpenStudio/OpenStudio
      BRANCH_NAME: ${{ github.ref_name }}

    container: # Define the Docker container for the job. All subsequent steps run inside it.
      image: kuangwenyi/openstudio-cmake-tools:jammy
      options: -u root -e "LANG=en_US.UTF-8" # These options are passed to the 'docker run' command internally
      volumes:
        - "/srv/data/jenkins/docker-volumes/conan-data:/home/ubuntu/conan-data"
        - "/srv/data/jenkins/docker-volumes/ubuntu-2204:/home/ubuntu/OpenStudio"

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Enviroment display
        run: |
          pip install conan
      
      - name: Cmake Setup
        run: |
          # Set up git and fetch PR head, then detect conan profile and install dependencies
          echo $PWD
          cd ${{ env.OPENSTUDIO_SOURCE_VOLUME }}
          echo $PWD && ls -la
          git config --global --add safe.directory "${{ env.OPENSTUDIO_SOURCE_VOLUME }}" && \
          git config user.email "cicommercialbuilding@gmail.com" && \
          git config user.name "ci-commercialbuildings" && \
          git fetch origin && \
          git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/* && \
          git checkout origin/pr/${{ env.BRANCH_NAME }} && \
          conan profile detect && \
          conan install . --output-folder=../OS-build-release-v2 --build=missing -c tools.cmake.cmaketoolchain:generator=Ninja -s compiler.cppstd=20 -s build_type=Release

# #      - name: Install dependencies and configure with CMake
# #        run: |
# #          echo $PWD
# #          cd ${{ env.OPENSTUDIO_DOCKER_VOLUME }}
# #          mkdir -p OS-build-release-v2
# #          cd OS-build-release-v2
# #          conan install ../OpenStudio --output-folder=. --build=missing \
# #            -c tools.cmake.cmaketoolchain:generator=Ninja \
# #            -s compiler.cppstd=20 -s build_type=Release
# #          source ./conanbuild.sh
#           cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
#             -DCMAKE_BUILD_TYPE=Release \
#             -DBUILD_TESTING=ON -DCPACK_BINARY_DEB=ON -DCPACK_BINARY_TGZ=ON \
#             -DBUILD_PYTHON_BINDINGS=ON -DBUILD_CLI=ON -DPYTHON_VERSION=3.12.2 \
#             ../OpenStudio

#       - name: Build with Ninja
#         run: |
#           cd OS-build-release-v2
#           source ./conanbuild.sh
#           ninja -j 2 package

      # - name: Run CTests with retries
      #   run: |
      #     cd OS-build-release-v2
      #     ctest -j 2 -T test --no-compress-output --output-on-failure || \
      #     ctest -T test -j 2 --rerun-failed --no-compress-output --output-on-failure || \
      #     ctest -T test -j 2 --rerun-failed --no-compress-output -VV

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ubuntu-2204-artifacts
      #     path: |
      #       OS-build-release-v2/*.deb
      #       OS-build-release-v2/_CPack_Packages/Linux/TGZ/*.tar.gz

      # - name: Upload to S3
      #   if: github.event_name == 'pull_request'
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     sudo apt-get install -y awscli
      #     cd OS-build-release-v2
      #     BRANCH=${{ github.head_ref }}
      #     aws s3 cp *.deb s3://openstudio-ci-builds/$BRANCH/ --acl public-read
      #     aws s3 cp _CPack_Packages/Linux/TGZ/*.tar.gz s3://openstudio-ci-builds/$BRANCH/ --acl public-read
