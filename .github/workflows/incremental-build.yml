name: Build and Test (Ubuntu 22.04)

on:
  pull_request:
  push:

jobs:
  build:
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'Pull Request - Ready for CI')
    runs-on: ubuntu-22.04

    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    env:
      OPENSTUDIO_BUILD_NAME: OS-build-release-v2
      MAX_SAFE_THREADS: $(( ($(nproc) * 80 + 50) / 100 ))

    container: # Define the Docker container for the job. All subsequent steps run inside it.
      image: kuangwenyi/openstudio-cmake-tools:jammy
      options: -u root -e "LANG=en_US.UTF-8" # These options are passed to the 'docker run' command internally

    defaults:
      run:
        working-directory: ${{ env.OPENSTUDIO_BUILD_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: /github/home/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      - name: Install dependencies
        run: |
          conan install . --output-folder=${{ env.OPENSTUDIO_BUILD_NAME }} --build=missing -c tools.cmake.cmaketoolchain:generator=Ninja -s compiler.cppstd=20 -s build_type=Release

      - name: Configure with CMake
        run: |
          . ./conanbuild.sh
          cmake -G Ninja \
                -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                -DCMAKE_BUILD_TYPE:STRING=Release \
                -DBUILD_TESTING:BOOL=ON \
                -DCPACK_BINARY_DEB:BOOL=ON \
                -DCPACK_BINARY_TGZ:BOOL=ON \
                -DCPACK_BINARY_IFW:BOOL=OFF \
                -DCPACK_BINARY_NSIS:BOOL=OFF \
                -DCPACK_BINARY_RPM:BOOL=OFF \
                -DCPACK_BINARY_STGZ:BOOL=OFF \
                -DCPACK_BINARY_TBZ2:BOOL=OFF \
                -DCPACK_BINARY_TXZ:BOOL=OFF \
                -DCPACK_BINARY_TZ:BOOL=OFF \
                -DBUILD_PYTHON_BINDINGS:BOOL=ON \
                -DBUILD_PYTHON_PIP_PACKAGE:BOOL=OFF \
                -DPYTHON_VERSION:STRING=3.12.2 \
                -DBUILD_RUBY_BINDINGS:BOOL=ON \
                -DBUILD_CLI:BOOL=ON \
                ..

      - name: Build with Ninja
        run: |
          . ./conanbuild.sh
          ninja -j ${{ env.MAX_SAFE_THREADS }} package

      - name: Run CTests with retries
        run: |
          mkdir -p Testing/run1 Testing/run2 Testing/run3
          ctest -j ${{ env.MAX_SAFE_THREADS }} --no-compress-output --output-on-failure --output-junit Testing/run1/results.xml || \
          ctest -j ${{ env.MAX_SAFE_THREADS }} --rerun-failed --no-compress-output --output-on-failure --output-junit Testing/run2/results.xml || \
          ctest -j ${{ env.MAX_SAFE_THREADS }} --rerun-failed --no-compress-output -VV --output-junit Testing/run3/results.xml
        continue-on-error: true

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "${{ env.OPENSTUDIO_BUILD_NAME }}/Testing/run*/results.xml" # Path to your JUnit output file
          output: "${{ env.OPENSTUDIO_BUILD_NAME }}/Testing/test-summary.md"
        if: always()

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: ${{ env.OPENSTUDIO_BUILD_NAME }}/Testing/test-summary.md
        if: always()

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-2204-artifacts
          path: |
            ${{ env.OPENSTUDIO_BUILD_NAME }}/*.deb
            ${{ env.OPENSTUDIO_BUILD_NAME }}/_CPack_Packages/Linux/TGZ/*.tar.gz
